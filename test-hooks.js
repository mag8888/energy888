// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—É–∫–æ–≤ –∏ —Ç–∏–ø–æ–≤ –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö—É–∫–æ–≤ –∏ —Ç–∏–ø–æ–≤ –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');

async function testHooksAndTypes() {
  try {
    // –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Ç–∏–ø–æ–≤
    console.log('üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ —Ç–∏–ø–æ–≤...');
    const { GAME_STATES, PLAYER_STATES, CELL_TYPES } = await import('./modules/game-board/types/index.js');
    console.log('‚úÖ –¢–∏–ø—ã —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('   - GAME_STATES:', Object.keys(GAME_STATES));
    console.log('   - PLAYER_STATES:', Object.keys(PLAYER_STATES));
    console.log('   - CELL_TYPES:', Object.keys(CELL_TYPES));

    // –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Ö—É–∫–æ–≤
    console.log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ —Ö—É–∫–æ–≤...');
    const { useGameState } = await import('./modules/game-board/hooks/useGameState.js');
    const { useUIState } = await import('./modules/game-board/hooks/useUIState.js');
    const { useGameLogic } = await import('./modules/game-board/hooks/useGameLogic.js');
    console.log('‚úÖ –•—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('   - useGameState:', typeof useGameState);
    console.log('   - useUIState:', typeof useUIState);
    console.log('   - useGameLogic:', typeof useGameLogic);

    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ö—É–∫–æ–≤ (–±–µ–∑ React)
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ö—É–∫–æ–≤...');
    
    // –ú–æ–∫–∞–µ–º React —Ö—É–∫–∏
    const mockUseState = (initial) => [initial, () => {}];
    const mockUseEffect = () => {};
    const mockUseRef = (initial) => ({ current: initial });
    const mockUseCallback = (fn) => fn;
    const mockUseMemo = (fn) => fn();

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è React
    global.React = {
      useState: mockUseState,
      useEffect: mockUseEffect,
      useRef: mockUseRef,
      useCallback: mockUseCallback,
      useMemo: mockUseMemo
    };

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º useGameState
    console.log('   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ useGameState...');
    const gameState = useGameState('test-room', { id: 'test-player' });
    console.log('     ‚úÖ useGameState —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('     - gamePlayers:', Array.isArray(gameState.gamePlayers));
    console.log('     - currentTurn:', typeof gameState.currentTurn);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º useUIState
    console.log('   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ useUIState...');
    const uiState = useUIState();
    console.log('     ‚úÖ useUIState —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('     - isMobile:', typeof uiState.isMobile);
    console.log('     - showModal:', typeof uiState.showProfessionModal);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º useGameLogic
    console.log('   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ useGameLogic...');
    const gameLogic = useGameLogic([], null, false, () => {});
    console.log('     ‚úÖ useGameLogic —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('     - diceValue:', typeof gameLogic.diceValue);
    console.log('     - rollDice:', typeof gameLogic.rollDice);

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log('   - –¢–∏–ø–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: 3');
    console.log('   - –•—É–∫–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: 3');
    console.log('   - –§—É–Ω–∫—Ü–∏–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: 9+');
    console.log('   - –°—Ç–∞—Ç—É—Å: ‚úÖ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢');

    console.log('\nüöÄ –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    console.log('   - –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: npm start');
    console.log('   - –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: npm run dev');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.error('Stack trace:', error.stack);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testHooksAndTypes();
