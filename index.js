const http = require('http');
const { Server } = require('socket.io');

const PORT = process.env.PORT || 3000;

console.log('Starting server on port', PORT);

const html = `<!DOCTYPE html>
<html>
<head>
    <title>Energy of Money</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body { 
            font-family: 'Arial', sans-serif; 
            margin: 0; 
            padding: 0; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container { 
            background: white; 
            padding: 40px; 
            border-radius: 20px; 
            max-width: 800px; 
            margin: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            text-align: center;
        }
        h1 { 
            color: #333; 
            margin-bottom: 30px;
            font-size: 2.5em;
        }
        .status { 
            background: #4CAF50; 
            color: white; 
            padding: 15px 30px; 
            border-radius: 50px; 
            display: inline-block;
            margin-bottom: 30px;
            font-weight: bold;
        }
        .locations {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 15px;
            margin: 30px 0;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
        }
        .location-btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 20px;
            border-radius: 15px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            min-height: 80px;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
        }
        .location-btn:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.3);
        }
        .location-btn:active {
            transform: translateY(0);
        }
        .location-btn.active {
            background: linear-gradient(45deg, #4CAF50, #45a049);
            transform: scale(1.05);
        }
        
        .location-btn[data-location="game"] {
            background: linear-gradient(45deg, #FF6B6B, #FF8E53);
            font-size: 18px;
            font-weight: bold;
        }
        
        .location-btn[data-location="game"]:hover {
            background: linear-gradient(45deg, #FF5252, #FF7043);
            transform: translateY(-8px) scale(1.05);
        }
        .location-content {
            margin-top: 30px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
            min-height: 200px;
            display: none;
        }
        .location-content.active {
            display: block;
        }
        .location-title {
            font-size: 1.5em;
            color: #333;
            margin-bottom: 15px;
        }
        .location-description {
            color: #666;
            line-height: 1.6;
            margin-bottom: 20px;
        }
        .location-actions {
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
        }
        .action-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .action-btn:hover {
            background: #5a6fd8;
            transform: translateY(-2px);
        }
        .stats {
            display: flex;
            justify-content: space-around;
            margin: 20px 0;
            padding: 20px;
            background: #f0f0f0;
            border-radius: 10px;
        }
        .stat {
            text-align: center;
        }
        .stat-value {
            font-size: 1.5em;
            font-weight: bold;
            color: #333;
        }
        .stat-label {
            color: #666;
            font-size: 0.9em;
        }
        .game-board-container {
            margin-top: 20px;
        }
        
        .game-controls {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .game-board {
            display: grid;
            grid-template-columns: repeat(8, 1fr);
            grid-template-rows: repeat(8, 1fr);
            gap: 2px;
            width: 100%;
            max-width: 600px;
            height: 600px;
            margin: 0 auto;
            border: 3px solid #333;
            border-radius: 10px;
            background: #f0f0f0;
            padding: 10px;
        }
        
        .game-cell {
            background: white;
            border: 1px solid #ddd;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }
        
        .game-cell:hover {
            background: #e0e0e0;
            transform: scale(1.05);
        }
        
        .game-cell.start {
            background: #4CAF50;
            color: white;
        }
        
        .game-cell.income {
            background: #2196F3;
            color: white;
        }
        
        .game-cell.expense {
            background: #f44336;
            color: white;
        }
        
        .game-cell.investment {
            background: #FF9800;
            color: white;
        }
        
        .game-cell.opportunity {
            background: #9C27B0;
            color: white;
        }
        
        .game-cell.player {
            background: #FFD700;
            color: #333;
            box-shadow: 0 0 10px rgba(255, 215, 0, 0.8);
        }
        
        .game-info {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 20px;
        }
        
        .player-info, .game-status {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 10px;
            border-left: 4px solid #667eea;
        }
        
        .player-stats div {
            margin: 5px 0;
            font-size: 14px;
        }
        
        .game-status div {
            margin: 5px 0;
            font-size: 14px;
        }
        
        #gameMessage {
            font-weight: bold;
            color: #333;
        }
        
        .dice-animation {
            animation: diceRoll 0.5s ease-in-out;
        }
        
        @keyframes diceRoll {
            0% { transform: rotate(0deg); }
            25% { transform: rotate(90deg); }
            50% { transform: rotate(180deg); }
            75% { transform: rotate(270deg); }
            100% { transform: rotate(360deg); }
        }
        
        @media (max-width: 600px) {
            .locations {
                grid-template-columns: 1fr;
            }
            .container {
                margin: 10px;
                padding: 20px;
            }
            .game-board {
                height: 400px;
                max-width: 400px;
            }
            .game-info {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéÆ Energy of Money</h1>
        <div class="status">‚úÖ Server Running</div>
        
        <div class="stats">
            <div class="stat">
                <div class="stat-value" id="money">$10,000</div>
                <div class="stat-label">–î–µ–Ω—å–≥–∏</div>
            </div>
            <div class="stat">
                <div class="stat-value" id="energy">100</div>
                <div class="stat-label">–≠–Ω–µ—Ä–≥–∏—è</div>
            </div>
            <div class="stat">
                <div class="stat-value" id="level">1</div>
                <div class="stat-label">–£—Ä–æ–≤–µ–Ω—å</div>
            </div>
        </div>
        
        <div class="locations">
            <button class="location-btn active" data-location="home" onclick="switchLocation('home')">
                üè† –î–æ–º
            </button>
            <button class="location-btn" data-location="game" onclick="switchLocation('game')">
                üé≤ –ò–≥—Ä–∞
            </button>
            <button class="location-btn" data-location="bank" onclick="switchLocation('bank')">
                üè¶ –ë–∞–Ω–∫
            </button>
            <button class="location-btn" data-location="work" onclick="switchLocation('work')">
                üíº –†–∞–±–æ—Ç–∞
            </button>
            <button class="location-btn" data-location="market" onclick="switchLocation('market')">
                üõí –†—ã–Ω–æ–∫
            </button>
            <button class="location-btn" data-location="investments" onclick="switchLocation('investments')">
                üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
            </button>
            <button class="location-btn" data-location="education" onclick="switchLocation('education')">
                üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            </button>
        </div>
        
        <div class="location-content active" id="home-content">
            <div class="location-title">üè† –î–æ–º</div>
            <div class="location-description">
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –¥–æ–º! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é. 
                –≠—Ç–æ –≤–∞—à–∞ –±–∞–∑–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
            </div>
            <div class="location-actions">
                <button class="action-btn" onclick="rest()">üò¥ –û—Ç–¥–æ—Ö–Ω—É—Ç—å (+20 —ç–Ω–µ—Ä–≥–∏–∏)</button>
                <button class="action-btn" onclick="plan()">üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å</button>
            </div>
        </div>
        
        <div class="location-content" id="bank-content">
            <div class="location-title">üè¶ –ë–∞–Ω–∫</div>
            <div class="location-description">
                –í –±–∞–Ω–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã, –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏. 
                –ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤–∞—à–∏ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.
            </div>
            <div class="location-actions">
                <button class="action-btn" onclick="openDeposit()">üí∞ –û—Ç–∫—Ä—ã—Ç—å –¥–µ–ø–æ–∑–∏—Ç</button>
                <button class="action-btn" onclick="takeLoan()">üí≥ –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç</button>
                <button class="action-btn" onclick="checkBalance()">üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å</button>
            </div>
        </div>
        
        <div class="location-content" id="market-content">
            <div class="location-title">üõí –†—ã–Ω–æ–∫</div>
            <div class="location-description">
                –ù–∞ —Ä—ã–Ω–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∞–∫—Ç–∏–≤—ã, —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏. 
                –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.
            </div>
            <div class="location-actions">
                <button class="action-btn" onclick="buyAssets()">üõçÔ∏è –ö—É–ø–∏—Ç—å –∞–∫—Ç–∏–≤—ã</button>
                <button class="action-btn" onclick="sellAssets()">üí∏ –ü—Ä–æ–¥–∞—Ç—å –∞–∫—Ç–∏–≤—ã</button>
                <button class="action-btn" onclick="bargain()">ü§ù –¢–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è</button>
            </div>
        </div>
        
        <div class="location-content" id="work-content">
            <div class="location-title">üíº –†–∞–±–æ—Ç–∞</div>
            <div class="location-description">
                –ù–∞ —Ä–∞–±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏, –ø–æ–≤—ã—à–∞—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—å–µ—Ä—É. 
                –ß–µ–º –≤—ã—à–µ –≤–∞—à–∞ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è, —Ç–µ–º –±–æ–ª—å—à–µ –≤—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ.
            </div>
            <div class="location-actions">
                <button class="action-btn" onclick="work()">‚ö° –†–∞–±–æ—Ç–∞—Ç—å</button>
                <button class="action-btn" onclick="study()">üìö –£—á–∏—Ç—å—Å—è</button>
                <button class="action-btn" onclick="promotion()">‚¨ÜÔ∏è –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ</button>
            </div>
        </div>
        
        <div class="location-content" id="market-content">
            <div class="location-title">üõí –†—ã–Ω–æ–∫</div>
            <div class="location-description">
                –ù–∞ —Ä—ã–Ω–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, –Ω–∞—Ö–æ–¥–∏—Ç—å –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è 
                –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏.
            </div>
            <div class="location-actions">
                <button class="action-btn" onclick="buyGoods()">üõí –ü–æ–∫—É–ø–∞—Ç—å</button>
                <button class="action-btn" onclick="sellGoods()">üí∞ –ü—Ä–æ–¥–∞–≤–∞—Ç—å</button>
                <button class="action-btn" onclick="findDeals()">üîç –ò—Å–∫–∞—Ç—å —Å–¥–µ–ª–∫–∏</button>
            </div>
        </div>
        
        <div class="location-content" id="investments-content">
            <div class="location-title">üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</div>
            <div class="location-description">
                –í —Ä–∞–∑–¥–µ–ª–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞–∫—Ç–∏–≤—ã: 
                –∞–∫—Ü–∏–∏, –æ–±–ª–∏–≥–∞—Ü–∏–∏, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.
            </div>
            <div class="location-actions">
                <button class="action-btn" onclick="investStocks()">üìä –ê–∫—Ü–∏–∏</button>
                <button class="action-btn" onclick="investRealEstate()">üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å</button>
                <button class="action-btn" onclick="investCrypto()">‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</button>
            </div>
        </div>
        
        <div class="location-content" id="education-content">
            <div class="location-title">üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</div>
            <div class="location-description">
                –í –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å, 
                –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏.
            </div>
            <div class="location-actions">
                <button class="action-btn" onclick="studyFinance()">üí∞ –§–∏–Ω–∞–Ω—Å—ã</button>
                <button class="action-btn" onclick="studyInvesting()">üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</button>
                <button class="action-btn" onclick="studyBusiness()">üöÄ –ë–∏–∑–Ω–µ—Å</button>
            </div>
        </div>
        
        <div class="location-content" id="game-content">
            <div class="location-title">üé≤ Energy of Money - –ò–≥—Ä–æ–≤–∞—è –î–æ—Å–∫–∞</div>
            <div class="location-description">
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∏–≥—Ä–æ–≤—É—é –¥–æ—Å–∫—É! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∏–≥—Ä—É 
                "Energy of Money" —Å –ø–æ–ª–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∫–æ–π –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é.
            </div>
            
            <div class="game-board-container">
                <div class="game-controls">
                    <button class="action-btn" onclick="rollDice()">üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫</button>
                    <button class="action-btn" onclick="startNewGame()">üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞</button>
                    <button class="action-btn" onclick="showRules()">üìã –ü—Ä–∞–≤–∏–ª–∞</button>
                </div>
                
                <div class="game-board" id="gameBoard">
                    <!-- –ò–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>
                
                <div class="game-info">
                    <div class="player-info">
                        <h3>–ò–≥—Ä–æ–∫ 1</h3>
                        <div class="player-stats">
                            <div>üí∞ –î–µ–Ω—å–≥–∏: $<span id="playerMoney">10000</span></div>
                            <div>‚ö° –≠–Ω–µ—Ä–≥–∏—è: <span id="playerEnergy">100</span></div>
                            <div>üìà –£—Ä–æ–≤–µ–Ω—å: <span id="playerLevel">1</span></div>
                        </div>
                    </div>
                    
                    <div class="game-status">
                        <div id="currentPlayer">–•–æ–¥ –∏–≥—Ä–æ–∫–∞ 1</div>
                        <div id="diceResult">–ë—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫</div>
                        <div id="gameMessage">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        socket.on('connect', () => console.log('Connected to server'));
        
        let currentLocation = 'home';
        let money = 10000;
        let energy = 100;
        let level = 1;
        
        // –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        let gameBoard = [];
        let playerPosition = 0;
        let gameStarted = false;
        let currentPlayer = 1;
        let diceValue = 0;
        
        function switchLocation(location) {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            document.querySelectorAll('.location-btn').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('.location-content').forEach(content => content.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            document.querySelector('[data-location="' + location + '"]').classList.add('active');
            document.getElementById(location + '-content').classList.add('active');
            
            currentLocation = location;
            console.log('Switched to location:', location);
            
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É, —Å–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É
            if (location === 'game' && !gameStarted) {
                createGameBoard();
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            socket.emit('locationChange', { location: location });
        }
        
        function updateStats() {
            document.getElementById('money').textContent = '$' + money.toLocaleString();
            document.getElementById('energy').textContent = energy;
            document.getElementById('level').textContent = level;
        }
        
        // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –¥–æ–º–∞
        function rest() {
            energy = Math.min(100, energy + 20);
            updateStats();
            showMessage('–í—ã –æ—Ç–¥–æ—Ö–Ω—É–ª–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ 20 —ç–Ω–µ—Ä–≥–∏–∏!');
        }
        
        function plan() {
            showMessage('–û—Ç–∫—Ä—ã—Ç –ø–ª–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è...');
        }
        
        // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –±–∞–Ω–∫–∞
        function openDeposit() {
            if (money >= 1000) {
                money -= 1000;
                updateStats();
                showMessage('–î–µ–ø–æ–∑–∏—Ç –Ω–∞ $1000 –æ—Ç–∫—Ä—ã—Ç!');
            } else {
                showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞!');
            }
        }
        
        function takeLoan() {
            money += 5000;
            updateStats();
            showMessage('–ö—Ä–µ–¥–∏—Ç –Ω–∞ $5000 –ø–æ–ª—É—á–µ–Ω!');
        }
        
        function checkBalance() {
            showMessage('–í–∞—à –±–∞–ª–∞–Ω—Å: $' + money.toLocaleString());
        }
        
        // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä—ã–Ω–∫–∞
        function buyAssets() {
            if (money >= 500) {
                money -= 500;
                updateStats();
                showMessage('–ê–∫—Ç–∏–≤—ã –Ω–∞ $500 –∫—É–ø–ª–µ–Ω—ã!');
            } else {
                showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–∫—Ç–∏–≤–æ–≤!');
            }
        }
        
        function sellAssets() {
            money += 300;
            updateStats();
            showMessage('–ê–∫—Ç–∏–≤—ã –ø—Ä–æ–¥–∞–Ω—ã –∑–∞ $300!');
        }
        
        function bargain() {
            showMessage('–¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞—á–∞–ª–∞—Å—å...');
        }
        
        // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã
        function work() {
            if (energy >= 10) {
                energy -= 10;
                money += 100;
                updateStats();
                showMessage('–í—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ $100!');
            } else {
                showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã!');
            }
        }
        
        function study() {
            if (money >= 200) {
                money -= 200;
                level++;
                updateStats();
                showMessage('–í—ã –∏–∑—É—á–∏–ª–∏ –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫! –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω!');
            } else {
                showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!');
            }
        }
        
        function promotion() {
            if (level >= 3) {
                showMessage('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ!');
            } else {
                showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è!');
            }
        }
        
        // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        function investStocks() {
            if (money >= 1000) {
                money -= 1000;
                updateStats();
                showMessage('–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –∞–∫—Ü–∏–∏ –Ω–∞ $1000!');
            } else {
                showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π!');
            }
        }
        
        function investRealEstate() {
            if (money >= 5000) {
                money -= 5000;
                updateStats();
                showMessage('–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –Ω–∞ $5000!');
            } else {
                showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π!');
            }
        }
        
        function investCrypto() {
            if (money >= 500) {
                money -= 500;
                updateStats();
                showMessage('–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ $500!');
            } else {
                showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π!');
            }
        }
        
        // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        function studyFinance() {
            if (money >= 300) {
                money -= 300;
                level++;
                updateStats();
                showMessage('–í—ã –∏–∑—É—á–∏–ª–∏ –æ—Å–Ω–æ–≤—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤!');
            } else {
                showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!');
            }
        }
        
        function studyInvesting() {
            if (money >= 400) {
                money -= 400;
                level++;
                updateStats();
                showMessage('–í—ã –∏–∑—É—á–∏–ª–∏ –æ—Å–Ω–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');
            } else {
                showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!');
            }
        }
        
        function studyBusiness() {
            if (money >= 500) {
                money -= 500;
                level++;
                updateStats();
                showMessage('–í—ã –∏–∑—É—á–∏–ª–∏ –æ—Å–Ω–æ–≤—ã –±–∏–∑–Ω–µ—Å–∞!');
            } else {
                showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!');
            }
        }
        
        // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—ã–Ω–∫–∞
        function buyGoods() {
            if (money >= 1000) {
                const cost = Math.floor(Math.random() * 500) + 500;
                money -= cost;
                energy -= 10;
                showMessage('–ö—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –∑–∞ $' + cost);
                updateStats();
            } else {
                showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!');
            }
        }
        
        function sellGoods() {
            if (energy >= 15) {
                const profit = Math.floor(Math.random() * 800) + 200;
                money += profit;
                energy -= 15;
                showMessage('–ü—Ä–æ–¥–∞–ª–∏ —Ç–æ–≤–∞—Ä—ã! –ü–æ–ª—É—á–∏–ª–∏ $' + profit);
                updateStats();
            } else {
                showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏!');
            }
        }
        
        function findDeals() {
            if (energy >= 25) {
                energy -= 25;
                const bonus = Math.floor(Math.random() * 1000) + 500;
                money += bonus;
                level += 1;
                showMessage('–ù–∞—à–ª–∏ –≤—ã–≥–æ–¥–Ω—É—é —Å–¥–µ–ª–∫—É! +$' + bonus + ', +1 —É—Ä–æ–≤–µ–Ω—å');
                updateStats();
            } else {
                showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏!');
            }
        }
        
        function showMessage(message) {
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const notification = document.createElement('div');
            notification.style.cssText = 
                'position: fixed;' +
                'top: 20px;' +
                'right: 20px;' +
                'background: #4CAF50;' +
                'color: white;' +
                'padding: 15px 20px;' +
                'border-radius: 10px;' +
                'box-shadow: 0 5px 15px rgba(0,0,0,0.3);' +
                'z-index: 1000;' +
                'animation: slideIn 0.3s ease;';
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        updateStats();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        socket.on('gameUpdate', (data) => {
            if (data.money !== undefined) money = data.money;
            if (data.energy !== undefined) energy = data.energy;
            if (data.level !== undefined) level = data.level;
            updateStats();
        });
        
        socket.on('message', (data) => {
            showMessage(data.message);
        });
        
        // –ò–≥—Ä–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        function createGameBoard() {
            const board = document.getElementById('gameBoard');
            board.innerHTML = '';
            
            // –°–æ–∑–¥–∞–µ–º 8x8 —Å–µ—Ç–∫—É
            for (let i = 0; i < 64; i++) {
                const cell = document.createElement('div');
                cell.className = 'game-cell';
                cell.id = 'cell-' + i;
                cell.onclick = () => cellClick(i);
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª–µ—Ç–∫–∏
                if (i === 0) {
                    cell.className += ' start';
                    cell.innerHTML = 'üè†<br>–°–¢–ê–†–¢';
                } else if (i % 8 === 0) {
                    cell.className += ' income';
                    cell.innerHTML = 'üí∞<br>–î–û–•–û–î';
                } else if (i % 8 === 1) {
                    cell.className += ' expense';
                    cell.innerHTML = 'üí∏<br>–†–ê–°–•–û–î';
                } else if (i % 8 === 2) {
                    cell.className += ' investment';
                    cell.innerHTML = 'üìà<br>–ò–ù–í–ï–°–¢';
                } else if (i % 8 === 3) {
                    cell.className += ' opportunity';
                    cell.innerHTML = 'üéØ<br>–í–û–ó–ú–û–ñ';
                } else {
                    cell.innerHTML = i;
                }
                
                board.appendChild(cell);
            }
            
            // –†–∞–∑–º–µ—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
            updatePlayerPosition();
        }
        
        function cellClick(cellIndex) {
            if (!gameStarted) return;
            
            const cell = document.getElementById('cell-' + cellIndex);
            const cellType = getCellType(cellIndex);
            
            showMessage('–ö–ª–µ—Ç–∫–∞ ' + cellIndex + ': ' + cellType);
            handleCellAction(cellType, cellIndex);
        }
        
        function getCellType(cellIndex) {
            if (cellIndex === 0) return 'start';
            if (cellIndex % 8 === 0) return 'income';
            if (cellIndex % 8 === 1) return 'expense';
            if (cellIndex % 8 === 2) return 'investment';
            if (cellIndex % 8 === 3) return 'opportunity';
            return 'neutral';
        }
        
        function handleCellAction(cellType, cellIndex) {
            switch(cellType) {
                case 'start':
                    showMessage('–í—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ! –ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å $1000!');
                    money += 1000;
                    break;
                case 'income':
                    const incomeAmount = Math.floor(Math.random() * 500) + 100;
                    showMessage('–î–æ—Ö–æ–¥! –ü–æ–ª—É—á–∏–ª–∏ $' + incomeAmount);
                    money += incomeAmount;
                    break;
                case 'expense':
                    const expenseAmount = Math.floor(Math.random() * 300) + 50;
                    showMessage('–†–∞—Å—Ö–æ–¥! –ü–æ—Ç—Ä–∞—Ç–∏–ª–∏ $' + expenseAmount);
                    money -= expenseAmount;
                    break;
                case 'investment':
                    const investAmount = Math.floor(Math.random() * 1000) + 200;
                    if (money >= investAmount) {
                        showMessage('–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è! –ü–æ—Ç—Ä–∞—Ç–∏–ª–∏ $' + investAmount);
                        money -= investAmount;
                        level++;
                    } else {
                        showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏!');
                    }
                    break;
                case 'opportunity':
                    const opportunityAmount = Math.floor(Math.random() * 2000) + 500;
                    showMessage('–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å! –ü–æ–ª—É—á–∏–ª–∏ $' + opportunityAmount);
                    money += opportunityAmount;
                    break;
            }
            
            updateStats();
            updateGameStats();
        }
        
        function rollDice() {
            if (!gameStarted) {
                showMessage('–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É!');
                return;
            }
            
            diceValue = Math.floor(Math.random() * 6) + 1;
            document.getElementById('diceResult').textContent = '–í—ã–ø–∞–ª–æ: ' + diceValue;
            document.getElementById('diceResult').classList.add('dice-animation');
            
            setTimeout(() => {
                document.getElementById('diceResult').classList.remove('dice-animation');
                movePlayer(diceValue);
            }, 500);
        }
        
        function movePlayer(steps) {
            const oldPosition = playerPosition;
            playerPosition = (playerPosition + steps) % 64;
            
            updatePlayerPosition();
            
            const cellType = getCellType(playerPosition);
            showMessage('–ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –Ω–∞ ' + steps + ' –∫–ª–µ—Ç–æ–∫! –ö–ª–µ—Ç–∫–∞: ' + cellType);
            
            setTimeout(() => {
                handleCellAction(cellType, playerPosition);
            }, 1000);
        }
        
        function updatePlayerPosition() {
            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å player —Å–æ –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫
            document.querySelectorAll('.game-cell').forEach(cell => {
                cell.classList.remove('player');
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å player –∫ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            const currentCell = document.getElementById('cell-' + playerPosition);
            if (currentCell) {
                currentCell.classList.add('player');
            }
        }
        
        function startNewGame() {
            gameStarted = true;
            playerPosition = 0;
            money = 10000;
            energy = 100;
            level = 1;
            
            createGameBoard();
            updateStats();
            updateGameStats();
            
            document.getElementById('gameMessage').textContent = '–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –ë—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫!';
            showMessage('–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –£–¥–∞—á–∏!');
        }
        
        function showRules() {
            const rules = 
                '–ü–†–ê–í–ò–õ–ê –ò–ì–†–´:\n\n' +
                '1. –ë—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –ø–æ –¥–æ—Å–∫–µ\n' +
                '2. üè† –°–¢–ê–†–¢ - –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å $1000\n' +
                '3. üí∞ –î–û–•–û–î - –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é —Å—É–º–º—É\n' +
                '4. üí∏ –†–ê–°–•–û–î - –ø–æ—Ç—Ä–∞—Ç—å—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é —Å—É–º–º—É\n' +
                '5. üìà –ò–ù–í–ï–°–¢ - –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏ –ø–æ–≤—ã—Å—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å\n' +
                '6. üéØ –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ - –ø–æ–ª—É—á–∏—Ç–µ –±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å\n' +
                '7. –¶–µ–ª—å: –Ω–∞–∫–æ–ø–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥!';
            
            showMessage(rules);
        }
        
        function updateGameStats() {
            document.getElementById('playerMoney').textContent = money.toLocaleString();
            document.getElementById('playerEnergy').textContent = energy;
            document.getElementById('playerLevel').textContent = level;
            document.getElementById('currentPlayer').textContent = '–•–æ–¥ –∏–≥—Ä–æ–∫–∞ ' + currentPlayer;
        }
    </script>
</body>
</html>`;

const server = http.createServer((req, res) => {
  if (req.url === '/') {
    res.writeHead(200, { 'Content-Type': 'text/html' });
    res.end(html);
  } else if (req.url === '/health') {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ status: 'OK', timestamp: new Date().toISOString() }));
  } else if (req.url === '/webhook' && req.method === 'POST') {
    let body = '';
    req.on('data', chunk => body += chunk.toString());
    req.on('end', () => {
      console.log('Webhook received');
      res.writeHead(200, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ ok: true }));
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/html' });
    res.end('<h1>404 Not Found</h1>');
  }
});

const io = new Server(server, { cors: { origin: "*" } });

io.on('connection', (socket) => {
  console.log('Client connected:', socket.id);
  socket.emit('welcome', { message: 'Welcome to Energy of Money!' });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –ª–æ–∫–∞—Ü–∏–∏
  socket.on('locationChange', (data) => {
    console.log('Location changed to:', data.location);
    socket.emit('message', { message: `–ü–µ—Ä–µ—à–ª–∏ –≤ –ª–æ–∫–∞—Ü–∏—é: ${data.location}` });
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  socket.on('gameAction', (data) => {
    console.log('Game action:', data);
    socket.emit('message', { message: `–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${data.action}` });
  });
});

server.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down');
  server.close(() => process.exit(0));
});

process.on('SIGINT', () => {
  console.log('SIGINT received, shutting down');
  server.close(() => process.exit(0));
});