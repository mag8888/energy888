#!/usr/bin/env node

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Socket.IO
const http = require('http');
const { Server } = require('socket.io');
const crypto = require('crypto');

const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.BOT_TOKEN;
const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET || crypto.randomBytes(32).toString('hex');

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if (!BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
  process.exit(1);
}

console.log('üöÄ Starting Energy of Money Secure Server...');
console.log('üìÅ Working directory:', process.cwd());
console.log(`üì° Server will run on port: ${PORT}`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ webhook –¥–∞–Ω–Ω—ã—Ö
function validateWebhookData(data) {
  try {
    if (!data || typeof data !== 'object') {
      return { valid: false, error: 'Invalid data format' };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è Telegram webhook
    if (data.message) {
      const message = data.message;
      if (!message.chat || !message.from) {
        return { valid: false, error: 'Invalid message structure' };
      }
      
      // –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      if (message.text && typeof message.text === 'string') {
        message.text = message.text.slice(0, 4096); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
      }
    }
    
    return { valid: true };
  } catch (error) {
    return { valid: false, error: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ HTML
function sanitizeHtml(html) {
  return html
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#x27;')
    .replace(/\//g, '&#x2F;');
}

// HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
const htmlContent = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Energy of Money - –ò–≥—Ä–∞</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 0;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            text-align: center;
            background: white;
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            max-width: 600px;
            margin: 20px;
        }
        h1 {
            color: #333;
            margin-bottom: 20px;
            font-size: 2.5em;
        }
        p {
            color: #666;
            font-size: 1.2em;
            line-height: 1.6;
            margin-bottom: 30px;
        }
        .status {
            background: #4CAF50;
            color: white;
            padding: 15px 30px;
            border-radius: 50px;
            font-size: 1.1em;
            font-weight: bold;
            display: inline-block;
            margin: 20px 0;
        }
        .info {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            border-left: 4px solid #667eea;
        }
        .socket-status {
            background: #e8f5e8;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            border-left: 4px solid #4CAF50;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéÆ Energy of Money</h1>
        <div class="status">‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!</div>
        <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥" - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏.</p>
        
        <div class="socket-status">
            <h3>üîå Socket.IO Status</h3>
            <p id="socket-status">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</p>
        </div>
        
        <div class="info">
            <h3>üöÄ –°—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è</h3>
            <p><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> Railway.app</p>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ</p>
            <p><strong>–í—Ä–µ–º—è:</strong> <span id="time"></span></p>
        </div>
        
        <div class="info">
            <h3>üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã</h3>
            <p>‚Ä¢ –ò–∑—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏</p>
            <p>‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∫–≤–µ—Å—Ç—ã</p>
            <p>‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</p>
            <p>‚Ä¢ –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–Ω–∞—Ç—ã</p>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        function updateTime() {
            const now = new Date();
            document.getElementById('time').textContent = now.toLocaleString('ru-RU');
        }
        updateTime();
        setInterval(updateTime, 1000);
        
        // Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        let socket;
        try {
            socket = io();
            
            socket.on('connect', () => {
                document.getElementById('socket-status').textContent = '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Socket.IO';
                console.log('Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω');
            });
            
            socket.on('disconnect', () => {
                document.getElementById('socket-status').textContent = '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Socket.IO';
                console.log('Socket.IO –æ—Ç–∫–ª—é—á–µ–Ω');
            });
            
            socket.on('error', (error) => {
                document.getElementById('socket-status').textContent = '‚ùå –û—à–∏–±–∫–∞ Socket.IO: ' + error;
                console.error('Socket.IO –æ—à–∏–±–∫–∞:', error);
            });
        } catch (error) {
            document.getElementById('socket-status').textContent = '‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Socket.IO';
            console.error('–û—à–∏–±–∫–∞ Socket.IO:', error);
        }
    </script>
</body>
</html>`;

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer((req, res) => {
  const startTime = Date.now();
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
  if (process.env.NODE_ENV !== 'production') {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
  }
  
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  res.setHeader('X-Content-Type-Options', 'nosniff');
  res.setHeader('X-Frame-Options', 'DENY');
  res.setHeader('X-XSS-Protection', '1; mode=block');
  
  if (req.method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }
  
  // Rate limiting (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
  const clientIP = req.connection.remoteAddress;
  if (!global.rateLimit) {
    global.rateLimit = new Map();
  }
  
  const now = Date.now();
  const windowMs = 60000; // 1 –º–∏–Ω—É—Ç–∞
  const maxRequests = 100; // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
  
  if (global.rateLimit.has(clientIP)) {
    const requests = global.rateLimit.get(clientIP);
    const recentRequests = requests.filter(time => now - time < windowMs);
    
    if (recentRequests.length >= maxRequests) {
      res.writeHead(429, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ error: 'Too Many Requests' }));
      return;
    }
    
    recentRequests.push(now);
    global.rateLimit.set(clientIP, recentRequests);
  } else {
    global.rateLimit.set(clientIP, [now]);
  }
  
  // –û–±—Å–ª—É–∂–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  if (req.url === '/' || req.url === '/index.html') {
    res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
    res.end(htmlContent);
  }
  // Health check endpoint
  else if (req.url === '/health') {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({
      status: 'OK',
      timestamp: new Date().toISOString(),
      socketio: 'available',
      uptime: process.uptime()
    }));
  }
  // Webhook endpoint –¥–ª—è Telegram —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  else if (req.url === '/webhook' && req.method === 'POST') {
    let body = '';
    
    req.on('data', chunk => {
      body += chunk.toString();
    });
    
    req.on('end', () => {
      try {
        const update = JSON.parse(body);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        const validation = validateWebhookData(update);
        if (!validation.valid) {
          console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ webhook –¥–∞–Ω–Ω—ã–µ:', validation.error);
          res.writeHead(400, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({ ok: false, error: validation.error }));
          return;
        }
        
        console.log('üì® –ü–æ–ª—É—á–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π webhook:', update);
        
        // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ ok: true }));
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        res.writeHead(500, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ ok: false, error: 'Internal server error' }));
      }
    });
  }
  // API endpoint –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
  else if (req.url === '/api/status') {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({
      status: 'Bot is running',
      bot: 'https://t.me/energy_m_bot',
      game: 'https://money8888-production.up.railway.app/',
      socketio: 'available',
      timestamp: new Date().toISOString(),
      uptime: process.uptime()
    }));
  }
  else {
    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404
    res.writeHead(404, { 'Content-Type': 'text/html; charset=utf-8' });
    res.end(`
      <html>
        <head><title>404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</title></head>
        <body style="font-family: Arial, sans-serif; text-align: center; padding: 50px;">
          <h1>404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
          <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ <a href="/">–≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É</a></p>
        </body>
      </html>
    `);
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
  const duration = Date.now() - startTime;
  if (process.env.NODE_ENV !== 'production' && duration > 1000) {
    console.warn(`‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${req.url} - ${duration}ms`);
  }
});

// –°–æ–∑–¥–∞–µ–º Socket.IO —Å–µ—Ä–≤–µ—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  },
  maxHttpBufferSize: 1e6, // 1MB –º–∞–∫—Å–∏–º—É–º
  pingTimeout: 60000,
  pingInterval: 25000
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
const connectedClients = new Map();
const MAX_CLIENTS = 1000;

io.on('connection', (socket) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  if (connectedClients.size >= MAX_CLIENTS) {
    socket.emit('error', 'Server is at capacity');
    socket.disconnect();
    return;
  }
  
  const clientId = socket.id;
  connectedClients.set(clientId, {
    connectedAt: Date.now(),
    ip: socket.handshake.address
  });
  
  console.log(`üîå –ù–æ–≤–æ–µ Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${clientId} (${connectedClients.size}/${MAX_CLIENTS})`);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  socket.emit('welcome', {
    message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Energy of Money!',
    timestamp: new Date().toISOString(),
    clientId: clientId
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  socket.on('getRooms', (callback) => {
    try {
      console.log('üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç');
      const rooms = [
        { id: 'room1', name: '–ö–æ–º–Ω–∞—Ç–∞ 1', players: 2, maxPlayers: 6 },
        { id: 'room2', name: '–ö–æ–º–Ω–∞—Ç–∞ 2', players: 1, maxPlayers: 6 }
      ];
      
      if (typeof callback === 'function') {
        callback({ rooms });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', error);
      if (typeof callback === 'function') {
        callback({ error: 'Failed to get rooms' });
      }
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  socket.on('createRoom', (data, callback) => {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!data || typeof data !== 'object') {
        throw new Error('Invalid room data');
      }
      
      console.log('üè† –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', data);
      const roomId = 'room_' + Date.now();
      
      if (typeof callback === 'function') {
        callback({
          success: true,
          roomId: roomId,
          message: '–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
      if (typeof callback === 'function') {
        callback({ success: false, error: error.message });
      }
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  socket.on('joinRoom', (data, callback) => {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!data || !data.roomId) {
        throw new Error('Room ID is required');
      }
      
      console.log('üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ:', data);
      
      if (typeof callback === 'function') {
        callback({
          success: true,
          message: '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ'
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
      if (typeof callback === 'function') {
        callback({ success: false, error: error.message });
      }
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  socket.on('disconnect', () => {
    connectedClients.delete(clientId);
    console.log(`üîå Socket.IO –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ: ${clientId} (${connectedClients.size}/${MAX_CLIENTS})`);
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤ production
  if (process.env.NODE_ENV === 'production') {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É');
  } else {
    process.exit(1);
  }
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', reason);
  // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤ production
  if (process.env.NODE_ENV === 'production') {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Promise, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É');
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
  console.log(`üîå Socket.IO –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ /socket.io/`);
  console.log(`üîê Webhook secret: ${WEBHOOK_SECRET.substring(0, 8)}...`);
});

// Graceful shutdown
function gracefulShutdown(signal) {
  console.log(`üõë –ü–æ–ª—É—á–µ–Ω ${signal}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...`);
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º Socket.IO
  io.close(() => {
    console.log('üîå Socket.IO –∑–∞–∫—Ä—ã—Ç');
  });
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
  server.close(() => {
    console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    console.error('‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ');
    process.exit(1);
  }, 10000);
}

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

module.exports = server;
