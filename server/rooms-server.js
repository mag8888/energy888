import express from 'express';
import http from 'http';
import { Server } from 'socket.io';
import cors from 'cors';
import dotenv from 'dotenv';
import { RoomController, PROFESSIONS, ROOM_CONFIGS } from '../modules/rooms/index.js';
import DatabaseService from '../modules/rooms/services/DatabaseService.js';

dotenv.config();

const app = express();
const FRONT_ORIGIN = process.env.FRONT_ORIGIN || '*';

// CORS configuration
const corsOptions = {
  origin: function (origin, callback) {
    if (!origin) return callback(null, true);
    
    const allowedOrigins = [
      'https://money8888-production.up.railway.app',
      'https://money8888-production.up.railway.app',
      'https://money8888-production.up.railway.app',
      'http://localhost:3000',
      'http://localhost:3001'
    ];
    
    if (FRONT_ORIGIN === '*' || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Bot-Token']
};

app.use(cors(corsOptions));
app.use(express.json());

// Handle preflight requests
app.options('*', (req, res) => {
  res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Bot-Token');
  res.header('Access-Control-Allow-Credentials', 'true');
  res.sendStatus(200);
});

const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: [
      'https://money8888-production.up.railway.app',
      'https://money8888-production.up.railway.app',
      'https://money8888-production.up.railway.app',
      'http://localhost:3000',
      'http://localhost:3001'
    ],
    methods: ['GET', 'POST'],
    credentials: true
  } 
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∫–æ–º–Ω–∞—Ç
const roomController = new RoomController();
let dbInitialized = false;

// ===== REST API ENDPOINTS =====

app.get('/', (_req, res) => res.json({ 
  ok: true, 
  name: 'energy888-rooms-server',
  message: 'Energy of Money Rooms Server with MongoDB',
  environment: process.env.NODE_ENV || 'development',
  port: process.env.PORT || 4000,
  timestamp: new Date().toISOString(),
  features: ['rooms', 'professions', 'mongodb', 'socket.io']
}));

app.get('/health', (_req, res) => {
  res.json({ 
    ok: true, 
    status: 'healthy',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    database: dbInitialized ? 'connected' : 'disconnected'
  });
});

app.get('/stats', async (_req, res) => {
  try {
    const stats = await roomController.getServerStats();
    res.json({
      ok: true,
      ...stats
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ ok: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
});

app.get('/professions', (_req, res) => {
  res.json({
    ok: true,
    professions: PROFESSIONS,
    configs: ROOM_CONFIGS
  });
});

app.get('/rooms', async (_req, res) => {
  try {
    const rooms = await roomController.getAllRooms();
    const roomsData = roomController.getRoomsListData(rooms);
    res.json({
      ok: true,
      rooms: roomsData,
      total: roomsData.length
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç:', error);
    res.status(500).json({ ok: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç' });
  }
});

// ===== SOCKET.IO HANDLERS =====

io.on('connection', async (socket) => {
  console.log('üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  if (!dbInitialized) {
    try {
      await DatabaseService.connect();
      dbInitialized = true;
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
  socket.on('get-rooms', async () => {
    try {
      console.log('üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç –æ—Ç:', socket.id);
      const rooms = await roomController.getAllRooms();
      const roomsData = roomController.getRoomsListData(rooms);
      socket.emit('rooms-list', roomsData);
      console.log('üìã –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–º–Ω–∞—Ç:', roomsData.length);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç' });
    }
  });

  // –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
  socket.on('create-room', async (data) => {
    try {
      console.log('üè† –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ—Ç:', socket.id, data);
      
      const result = await roomController.createRoom(data);
      if (result.success && result.room) {
        const roomData = roomController.getRoomClientData(result.room);
        socket.emit('room-created', roomData);
        io.emit('rooms-updated');
        console.log('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', result.room.id);
      } else {
        socket.emit('error', { message: result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã' });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã' });
    }
  });

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
  socket.on('join-room', async (data) => {
    try {
      console.log('üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –æ—Ç:', socket.id, data);
      
      const result = await roomController.joinRoom(data, socket.id);
      if (result.success && result.room) {
        socket.join(result.room.id);
        const roomData = roomController.getRoomClientData(result.room);
        socket.emit('room-joined', roomData);
        io.to(result.room.id).emit('room-updated', roomData);
        io.emit('rooms-updated');
        console.log('‚úÖ –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', data.roomId);
      } else {
        socket.emit('error', { message: result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ' });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ' });
    }
  });

  // –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
  socket.on('select-profession', async (data) => {
    try {
      console.log('üé≠ –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –æ—Ç:', socket.id, data);
      
      const result = await roomController.selectProfession(data);
      if (result.success) {
        const room = await roomController.getRoom(data.roomId);
        if (room) {
          const roomData = roomController.getRoomClientData(room);
          socket.emit('profession-selected', {
            roomId: data.roomId,
            playerId: data.playerId,
            profession: data.profession,
            success: true
          });
          io.to(data.roomId).emit('profession-selection-updated', {
            roomId: data.roomId,
            players: Array.from(room.players.values()),
            availableProfessions: room.availableProfessions.filter(prof => 
              !Array.from(room.players.values()).some(p => p.profession === prof)
            ),
            allProfessionsSelected: Array.from(room.players.values()).every(p => p.profession)
          });
        }
      } else {
        socket.emit('error', { message: result.error || '–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏' });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏' });
    }
  });

  // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
  socket.on('confirm-profession', async (data) => {
    try {
      console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –æ—Ç:', socket.id, data);
      
      const result = await roomController.confirmProfession(data);
      if (result.success) {
        const room = await roomController.getRoom(data.roomId);
        if (room) {
          socket.emit('profession-confirmed', {
            roomId: data.roomId,
            playerId: data.playerId,
            profession: data.profession,
            confirmed: data.confirmed
          });
          io.to(data.roomId).emit('room-updated', roomController.getRoomClientData(room));
        }
      } else {
        socket.emit('error', { message: result.error || '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏' });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏' });
    }
  });

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
  socket.on('get-available-professions', async (data) => {
    try {
      console.log('üéØ –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –æ—Ç:', socket.id, data);
      
      const result = await roomController.getAvailableProfessions(data.roomId);
      if (result.success) {
        socket.emit('available-professions', {
          roomId: data.roomId,
          professions: result.professions,
          selectionMode: 'choice',
          selectedProfessions: result.selectedProfessions
        });
      } else {
        socket.emit('error', { message: result.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π' });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π' });
    }
  });

  // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
  socket.on('rooms-updated', async () => {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç –æ—Ç:', socket.id);
      const rooms = await roomController.getAllRooms();
      const roomsData = roomController.getRoomsListData(rooms);
      socket.emit('rooms-list', roomsData);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç' });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  socket.on('disconnect', async () => {
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—ã, –≥–¥–µ –±—ã–ª —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫
      const rooms = await roomController.getAllRooms();
      for (const room of rooms) {
        const player = room.players.get(socket.id);
        if (player) {
          const result = await roomController.leaveRoom(room.id, socket.id);
          if (result.success && result.room) {
            io.to(room.id).emit('room-updated', roomController.getRoomClientData(result.room));
            io.emit('rooms-updated');
            console.log('üëã –ò–≥—Ä–æ–∫ –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É:', room.id);
          }
          break;
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞:', error);
    }
  });
});

// ===== –°–ï–†–í–ï–† STARTUP =====

const PORT = process.env.PORT || 4000;
const HOST = process.env.NODE_ENV === 'production' ? '0.0.0.0' : 'localhost';

server.listen(PORT, HOST, async () => {
  console.log(`üöÄ Rooms Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${HOST}:${PORT}`);
  console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üîó Front origin: ${FRONT_ORIGIN}`);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  try {
    await DatabaseService.connect();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç
    const rooms = await roomController.getAllRooms();
    console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${rooms.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç`);
    
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  }
});

server.on('error', (err) => {
  console.error('‚ùå Server error:', err);
});

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  await DatabaseService.disconnect();
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  await DatabaseService.disconnect();
  process.exit(0);
});
