const http = require('http');
const https = require('https');
const url = require('url');

const BOT_TOKEN = process.env.BOT_TOKEN;
const PORT = process.env.PORT || 3001;

if (!BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
  process.exit(1);
}

// Webhook URL –¥–ª—è Render.com
const WEBHOOK_URL = process.env.WEBHOOK_URL || 'https://money8888-production.up.railway.app/webhook';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API
function sendTelegramRequest(method, data = {}) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify(data);
    
    const options = {
      hostname: 'api.telegram.org',
      port: 443,
      path: `/bot${BOT_TOKEN}/${method}`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const result = JSON.parse(responseData);
          resolve(result);
        } catch (error) {
          reject(error);
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.write(postData);
    req.end();
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async function handleMessage(update) {
  const message = update.message;
  if (!message) return;

  const chatId = message.chat.id;
  const text = message.text;
  const username = message.from.username || message.from.first_name;

  console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @${username}: ${text}`);

  try {
    if (text === '/start') {
      await sendTelegramRequest('sendMessage', {
        chat_id: chatId,
        text: `üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Energy of Money!</b>\n\n` +
              `üëã –ü—Ä–∏–≤–µ—Ç, ${message.from.first_name}!\n\n` +
              `üéØ –≠—Ç–æ –∏–≥—Ä–∞ –ø—Ä–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω—å–≥–∞–º–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π.\n\n` +
              `üîó <a href="https://money8888-production.up.railway.app">–ò–≥—Ä–∞—Ç—å –≤ Energy of Money</a>\n\n` +
              `üí° <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n` +
              `/start - –ù–∞—á–∞—Ç—å\n` +
              `/help - –ü–æ–º–æ—â—å\n` +
              `/game - –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–≥—Ä–µ\n` +
              `/rooms - –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç`,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });
    }
    else if (text === '/help') {
      await sendTelegramRequest('sendMessage', {
        chat_id: chatId,
        text: `üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ Energy of Money</b>\n\n` +
              `üéÆ <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n` +
              `1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏–≥—Ä—ã\n` +
              `2. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π\n` +
              `3. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏ –º–µ—á—Ç—É\n` +
              `4. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å!\n\n` +
              `üîó <a href="https://money8888-production.up.railway.app">–ò–≥—Ä–∞—Ç—å –≤ Energy of Money</a>\n\n` +
              `üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n` +
              `–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ @mag8888`,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });
    }
    else if (text === '/game') {
      await sendTelegramRequest('sendMessage', {
        chat_id: chatId,
        text: `üéÆ <b>–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–µ</b>\n\n` +
              `üîó <a href="https://money8888-production.up.railway.app">–ò–≥—Ä–∞—Ç—å –≤ Energy of Money</a>\n\n` +
              `üí° <i>–ò–≥—Ä–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ</i>`,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });
    }
    else if (text === '/rooms') {
      await sendTelegramRequest('sendMessage', {
        chat_id: chatId,
        text: `üè† <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç</b>\n\n` +
              `üîó <a href="https://money8888-production.up.railway.app/rooms">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–Ω–∞—Ç—ã</a>\n\n` +
              `üí° <i>–¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π</i>`,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });
    }
    else {
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
      await sendTelegramRequest('sendMessage', {
        chat_id: chatId,
        text: `‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n` +
              `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n\n` +
              `üîó <a href="https://money8888-production.up.railway.app">–ò–≥—Ä–∞—Ç—å –≤ Energy of Money</a>`,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
const server = http.createServer((req, res) => {
  const parsedUrl = url.parse(req.url, true);
  const path = parsedUrl.pathname;
  const method = req.method;

  console.log(`${method} ${path}`);

  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }

  if (path === '/' && method === 'GET') {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({
      status: 'Bot is running',
      bot: 'https://t.me/energy_m_bot',
      game: 'https://money8888-production.up.railway.app/',
      timestamp: new Date().toISOString()
    }));
  }
  else if (path === '/health' && method === 'GET') {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({
      status: 'OK',
      timestamp: new Date().toISOString()
    }));
  }
  else if (path === '/webhook' && method === 'POST') {
    let body = '';
    
    req.on('data', chunk => {
      body += chunk.toString();
    });
    
    req.on('end', async () => {
      try {
        const update = JSON.parse(body);
        console.log('üì® –ü–æ–ª—É—á–µ–Ω webhook:', update);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await handleMessage(update);
        
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ ok: true }));
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        res.writeHead(500, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ ok: false, error: error.message }));
      }
    });
  }
  else if (path === '/setwebhook' && method === 'POST') {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    sendTelegramRequest('setWebhook', {
      url: WEBHOOK_URL
    }).then(result => {
      res.writeHead(200, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify(result));
    }).catch(error => {
      res.writeHead(500, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ ok: false, error: error.message }));
    });
  }
  else {
    res.writeHead(404, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ error: 'Not found' }));
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, () => {
  console.log(`ü§ñ Telegram Bot –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üîó Webhook URL: ${WEBHOOK_URL}`);
  console.log(`üåê Game URL: https://money8888-production.up.railway.app`);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  sendTelegramRequest('setWebhook', {
    url: WEBHOOK_URL
  }).then(result => {
    console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', result);
  }).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
  });
});

// Graceful shutdown
process.once('SIGINT', () => {
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  server.close(() => {
    process.exit(0);
  });
});

process.once('SIGTERM', () => {
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  server.close(() => {
    process.exit(0);
  });
});

module.exports = server;
