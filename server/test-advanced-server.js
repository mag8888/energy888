const fetch = require('node-fetch');

const SERVER_URL = process.env.SERVER_URL || 'http://localhost:4000';

async function testServer() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Advanced Socket Server...\n');
  
  try {
    // –¢–µ—Å—Ç 1: –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...');
    const statusResponse = await fetch(`${SERVER_URL}/`);
    const statusData = await statusResponse.json();
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å:', statusData.ok ? 'OK' : 'ERROR');
    console.log('üìä –î–∞–Ω–Ω—ã–µ:', JSON.stringify(statusData, null, 2));
    
    // –¢–µ—Å—Ç 2: –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞...');
    const healthResponse = await fetch(`${SERVER_URL}/health`);
    const healthData = await healthResponse.json();
    console.log('‚úÖ –ó–¥–æ—Ä–æ–≤—å–µ:', healthData.status);
    console.log('üìä –î–∞–Ω–Ω—ã–µ:', JSON.stringify(healthData, null, 2));
    
    // –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
    const statsResponse = await fetch(`${SERVER_URL}/stats`);
    const statsData = await statsResponse.json();
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', statsData.ok ? 'OK' : 'ERROR');
    console.log('üìä –î–∞–Ω–Ω—ã–µ:', JSON.stringify(statsData, null, 2));
    
    // –¢–µ—Å—Ç 4: –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç...');
    const roomsResponse = await fetch(`${SERVER_URL}/rooms`);
    const roomsData = await roomsResponse.json();
    console.log('‚úÖ –ö–æ–º–Ω–∞—Ç—ã:', roomsData.ok ? 'OK' : 'ERROR');
    console.log('üìä –î–∞–Ω–Ω—ã–µ:', JSON.stringify(roomsData, null, 2));
    
    // –¢–µ—Å—Ç 5: –ó–∞–ª —Å–ª–∞–≤—ã
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ª —Å–ª–∞–≤—ã...');
    const hallResponse = await fetch(`${SERVER_URL}/hall-of-fame`);
    const hallData = await hallResponse.json();
    console.log('‚úÖ –ó–∞–ª —Å–ª–∞–≤—ã:', hallData.ok ? 'OK' : 'ERROR');
    console.log('üìä –î–∞–Ω–Ω—ã–µ:', JSON.stringify(hallData, null, 2));
    
    // –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');
    const tokenResponse = await fetch(`${SERVER_URL}/tg/new-token`);
    const tokenData = await tokenResponse.json();
    console.log('‚úÖ –¢–æ–∫–µ–Ω:', tokenData.ok ? 'OK' : 'ERROR');
    console.log('üìä –î–∞–Ω–Ω—ã–µ:', JSON.stringify(tokenData, null, 2));
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testServer();
