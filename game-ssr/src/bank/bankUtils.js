// üè¶ Bank Utilities - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –≤–∞–ª—é—Ç—ã
 * @param {number} amount - –°—É–º–º–∞
 * @param {string} currency - –í–∞–ª—é—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '$')
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
 */
export const formatCurrency = (amount, currency = '$') => {
  if (typeof amount !== 'number' || isNaN(amount)) {
    return `${currency}0`;
  }
  
  return `${currency}${amount.toLocaleString('en-US', {
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  })}`;
};

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Ö–æ–¥–∞
 * @param {number} monthlyIncome - –ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥
 * @param {number} monthlyExpenses - –ú–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
 * @returns {number} –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
 */
export const calculateMaxCredit = (monthlyIncome, monthlyExpenses = 0) => {
  const netIncome = monthlyIncome - monthlyExpenses;
  return Math.floor(netIncome * 10); // 10 –º–µ—Å—è—Ü–µ–≤ –¥–æ—Ö–æ–¥–∞
};

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫
 * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
 * @returns {number} –î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫
 */
export const calculateCashFlow = (player) => {
  if (!player || !player.profession) {
    return 0;
  }
  
  const profession = player.profession;
  const monthlyIncome = profession.monthlyIncome || 0;
  const monthlyExpenses = profession.monthlyExpenses || 0;
  const passiveIncome = profession.passiveIncome || 0;
  
  return monthlyIncome + passiveIncome - monthlyExpenses;
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç
 * @param {number} requestedAmount - –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞
 * @param {number} maxCredit - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
 * @param {number} currentCredit - –¢–µ–∫—É—â–∏–π –∫—Ä–µ–¥–∏—Ç
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export const canTakeCredit = (requestedAmount, maxCredit, currentCredit = 0) => {
  const availableCredit = maxCredit - currentCredit;
  
  return {
    canTake: requestedAmount <= availableCredit,
    availableCredit,
    requestedAmount,
    maxCredit,
    currentCredit
  };
};

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ –∫—Ä–µ–¥–∏—Ç—É
 * @param {number} principal - –û—Å–Ω–æ–≤–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞
 * @param {number} annualRate - –ì–æ–¥–æ–≤–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞
 * @param {number} months - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤
 * @returns {number} –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂
 */
export const calculateMonthlyPayment = (principal, annualRate = 0.1, months = 12) => {
  if (principal <= 0 || months <= 0) return 0;
  
  const monthlyRate = annualRate / 12;
  const monthlyPayment = principal * (monthlyRate * Math.pow(1 + monthlyRate, months)) / 
                        (Math.pow(1 + monthlyRate, months) - 1);
  
  return Math.round(monthlyPayment);
};

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @param {number} amount - –°—É–º–º–∞
 * @param {number} minAmount - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
 * @param {number} maxAmount - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export const validateTransactionAmount = (amount, minAmount = 0, maxAmount = Infinity) => {
  if (typeof amount !== 'number' || isNaN(amount)) {
    return { isValid: false, error: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º' };
  }
  
  if (amount < minAmount) {
    return { isValid: false, error: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${formatCurrency(minAmount)}` };
  }
  
  if (amount > maxAmount) {
    return { isValid: false, error: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${formatCurrency(maxAmount)}` };
  }
  
  return { isValid: true, error: null };
};

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
 */
export const generateTransactionId = () => {
  return `txn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {Date|string|number} date - –î–∞—Ç–∞
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
 */
export const formatDate = (date) => {
  const d = new Date(date);
  return d.toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  });
};

/**
 * –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è
 */
export const BANK_CONSTANTS = {
  DEFAULT_INTEREST_RATE: 0.1, // 10% –≥–æ–¥–æ–≤—ã—Ö
  MIN_CREDIT_AMOUNT: 1000,
  MAX_CREDIT_AMOUNT: 1000000,
  CREDIT_MULTIPLIER: 10, // –ö—Ä–µ–¥–∏—Ç = 10 –º–µ—Å—è—Ü–µ–≤ –¥–æ—Ö–æ–¥–∞
  TRANSACTION_TYPES: {
    DEPOSIT: 'deposit',
    WITHDRAWAL: 'withdrawal',
    CREDIT: 'credit',
    PAYMENT: 'payment',
    TRANSFER: 'transfer'
  },
  CURRENCIES: {
    USD: '$',
    EUR: '‚Ç¨',
    RUB: '‚ÇΩ'
  }
};
