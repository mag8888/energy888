#!/usr/bin/env node

// üè¶ Build script –¥–ª—è Bank Module
// –°–æ–∑–¥–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø–∞–∫–µ—Ç

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üè¶ Building Energy of Money Bank Module...');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é dist
const distDir = path.join(__dirname, 'dist');
if (!fs.existsSync(distDir)) {
  fs.mkdirSync(distDir, { recursive: true });
}

// –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
const filesToCopy = [
  'package.json',
  'index.js',
  'README.md'
];

filesToCopy.forEach(file => {
  const srcPath = path.join(__dirname, file);
  const destPath = path.join(distDir, file);
  
  if (fs.existsSync(srcPath)) {
    fs.copyFileSync(srcPath, destPath);
    console.log(`‚úÖ Copied ${file}`);
  } else {
    console.log(`‚ö†Ô∏è  File not found: ${file}`);
  }
});

// –ö–æ–ø–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é src
const srcDir = path.join(__dirname, 'src');
const distSrcDir = path.join(distDir, 'src');

if (fs.existsSync(srcDir)) {
  copyDir(srcDir, distSrcDir);
  console.log('‚úÖ Copied src/ directory');
}

// –ö–æ–ø–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é examples
const examplesDir = path.join(__dirname, 'examples');
const distExamplesDir = path.join(distDir, 'examples');

if (fs.existsSync(examplesDir)) {
  copyDir(examplesDir, distExamplesDir);
  console.log('‚úÖ Copied examples/ directory');
}

// –°–æ–∑–¥–∞–µ–º .npmignore
const npmignoreContent = `
# Development files
build.js
*.log
.DS_Store
node_modules/
.git/
.gitignore

# IDE files
.vscode/
.idea/
*.swp
*.swo

# Test files
test/
tests/
__tests__/
*.test.js
*.spec.js

# Documentation
docs/
*.md
!README.md
`;

fs.writeFileSync(path.join(distDir, '.npmignore'), npmignoreContent.trim());
console.log('‚úÖ Created .npmignore');

// –°–æ–∑–¥–∞–µ–º .gitignore
const gitignoreContent = `
node_modules/
dist/
*.log
.DS_Store
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
`;

fs.writeFileSync(path.join(distDir, '.gitignore'), gitignoreContent.trim());
console.log('‚úÖ Created .gitignore');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function copyDir(src, dest) {
  if (!fs.existsSync(dest)) {
    fs.mkdirSync(dest, { recursive: true });
  }
  
  const entries = fs.readdirSync(src, { withFileTypes: true });
  
  for (const entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);
    
    if (entry.isDirectory()) {
      copyDir(srcPath, destPath);
    } else {
      fs.copyFileSync(srcPath, destPath);
    }
  }
}

console.log('üéâ Build completed!');
console.log('üì¶ Package ready in dist/ directory');
console.log('üìã To publish: cd dist && npm publish');
