import React, { useState, useEffect, useCallback } from 'react';
import { Box, Typography, Button, useMediaQuery, useTheme, Card, CardContent, Chip } from '@mui/material';
import { motion } from 'framer-motion';
import { AccountBalance, TrendingUp, TrendingDown, CreditCard, AttachMoney } from '@mui/icons-material';
import BankModal from './BankModal';

const BankModule = ({
  playerData,
  gamePlayers,
  socket,
  bankBalance,
  playerCredit,
  getMaxCredit,
  getCashFlow,
  setShowCreditModal,
  roomId,
  onBankBalanceChange
}) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [showBankModal, setShowBankModal] = useState(false);
  const [currentBalance, setCurrentBalance] = useState(0);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ user ID (–º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
  const getCurrentPlayer = useCallback(() => {
    if (!gamePlayers || !Array.isArray(gamePlayers) || !playerData?.id) {
      return null;
    }
    
    // –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ user ID (–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)
    let player = gamePlayers.find(p => p.id === playerData.id || p.userId === playerData.id);
    
    // Fallback: –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ user ID, –∏—â–µ–º –ø–æ username (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
    if (!player && playerData?.username) {
      player = gamePlayers.find(p => p.username === playerData.username);
      // –£–±–∏—Ä–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —É—Å–ø–µ—à–Ω–æ–º fallback
    }
    
    return player;
  }, [gamePlayers, playerData?.id, playerData?.username]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
  const getInitialBalance = useCallback(() => {
    const currentPlayer = getCurrentPlayer();
    const profession = currentPlayer?.profession || playerData?.profession;
    
    if (profession?.balance !== undefined) {
      return Number(profession.balance);
    }
    
    // Fallback –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    const professionBalances = {
      '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å': 3000,
      '–£—á–∏—Ç–µ–ª—å': 2000,
      '–í—Ä–∞—á': 5000,
      '–ò–Ω–∂–µ–Ω–µ—Ä': 4000,
      '–Æ—Ä–∏—Å—Ç': 6000
    };
    
    return professionBalances[profession?.name] || 3000;
  }, [getCurrentPlayer, playerData?.profession]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  useEffect(() => {
    const currentPlayer = getCurrentPlayer();
    let balance = 0;

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö:
    // 1. gamePlayers balance (–∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞) - –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢
    // 2. bankBalance prop (–≤–Ω–µ—à–Ω–∏–π –±–∞–ª–∞–Ω—Å)
    // 3. playerData profession balance (–±–∞–ª–∞–Ω—Å –∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏)
    // 4. –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    
    console.log('üîç [BankModule] –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', {
      currentPlayerBalance: currentPlayer?.balance,
      bankBalanceProp: bankBalance,
      professionBalance: playerData?.profession?.balance,
      initialBalance: getInitialBalance(),
      currentPlayer: currentPlayer
    });
    
    if (currentPlayer?.balance !== undefined && currentPlayer.balance !== null) {
      balance = Number(currentPlayer.balance);
      console.log('‚úÖ [BankModule] –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ gamePlayers:', balance);
    } else if (bankBalance !== undefined && bankBalance !== null && bankBalance > 0) {
      balance = Number(bankBalance);
      console.log('‚úÖ [BankModule] –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π –±–∞–ª–∞–Ω—Å:', balance);
    } else if (playerData?.profession?.balance !== undefined && playerData.profession.balance !== null) {
      balance = Number(playerData.profession.balance);
      console.log('‚úÖ [BankModule] –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:', balance);
    } else {
      balance = getInitialBalance();
      console.log('‚úÖ [BankModule] –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:', balance);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (balance !== currentBalance) {
      setCurrentBalance(balance);
      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
      console.log('üè¶ [BankModule] –ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω:', {
        userId: playerData?.id,
        username: playerData?.username,
        newBalance: balance,
        previousBalance: currentBalance,
        source: currentPlayer?.balance !== undefined ? 'player' : 
                bankBalance > 0 ? 'external' : 'initial'
      });
    }
  }, [gamePlayers, playerData?.profession?.balance, bankBalance, getCurrentPlayer, getInitialBalance, currentBalance]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
  const handleBankBalanceChange = useCallback((newBalance) => {
    console.log('üîÑ [BankModule] –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:', newBalance);
    setCurrentBalance(newBalance);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    if (onBankBalanceChange) {
      onBankBalanceChange(newBalance);
    }
  }, [onBankBalanceChange]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö
  const getFinancialInfo = useCallback(() => {
    const currentPlayer = getCurrentPlayer();
    const profession = currentPlayer?.profession || playerData?.profession;
    
    if (profession) {
      return {
        salary: profession.salary ?? 0,
        totalExpenses: profession.totalExpenses ?? 0
      };
    }
    
    return { salary: 0, totalExpenses: 0 };
  }, [getCurrentPlayer, playerData?.profession]);

  const financialInfo = getFinancialInfo();

  return (
    <motion.div
      initial={{ opacity: 0, x: 50 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.8, delay: 0.3 }}
    >
      <Button
        variant="contained"
        onClick={() => {
          console.log('üè¶ [BankModule] –ö–Ω–æ–ø–∫–∞ –±–∞–Ω–∫–∞ –Ω–∞–∂–∞—Ç–∞, —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', currentBalance);
          setShowBankModal(true);
        }}
        sx={{
          background: 'linear-gradient(135deg, rgba(15, 23, 42, 0.95) 0%, rgba(30, 41, 59, 0.95) 100%)',
          borderRadius: '16px',
          border: '1px solid rgba(255, 255, 255, 0.1)',
          position: 'relative',
          overflow: 'hidden',
          cursor: 'pointer',
          transition: 'all 0.3s ease',
          p: 3,
          minHeight: '120px',
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          gap: 2,
          width: '100%',
          '&:hover': {
            transform: 'translateY(-4px)',
            boxShadow: '0 12px 24px rgba(0, 0, 0, 0.3)',
            border: '1px solid rgba(16, 185, 129, 0.3)',
            background: 'linear-gradient(135deg, rgba(30, 41, 59, 0.95) 0%, rgba(51, 65, 85, 0.95) 100%)'
          },
          '&::before': {
            content: '""',
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            height: '2px',
            background: 'linear-gradient(90deg, #10B981, #059669, #10B981)',
            animation: 'shimmer 2s infinite'
          }
        }}
      >
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <AccountBalance sx={{ color: '#10B981', fontSize: '1.5rem' }} />
          <Typography variant="h6" sx={{ color: 'white', fontWeight: 'bold' }}>
            –ë–∞–Ω–∫
          </Typography>
          <Chip 
            label="–ê–∫—Ç–∏–≤–µ–Ω" 
            size="small" 
            sx={{ 
              backgroundColor: 'rgba(16, 185, 129, 0.2)',
              color: '#10B981',
              fontWeight: 'bold',
              fontSize: '0.7rem'
            }} 
          />
        </Box>
        
        {/* –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å */}
        <Box sx={{ textAlign: 'center' }}>
          <Typography variant={isMobile ? "h4" : "h3"} sx={{ 
            color: '#10B981', 
            fontWeight: 'bold',
            textShadow: '0 0 10px rgba(16, 185, 129, 0.3)',
            mb: 0.5
          }}>
            ${(currentBalance ?? 0).toLocaleString()}
          </Typography>
          <Typography variant="body2" sx={{ 
            color: 'rgba(255, 255, 255, 0.9)',
            fontSize: '0.8rem',
            textShadow: '0 1px 2px rgba(0, 0, 0, 0.3)'
          }}>
            –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
          </Typography>
        </Box>
      </Button>
      
      {/* –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –º–æ–¥–∞–ª */}
      <BankModal
        isOpen={showBankModal}
        onClose={() => setShowBankModal(false)}
        playerData={playerData}
        gamePlayers={gamePlayers}
        socket={socket}
        roomId={roomId}
        bankBalance={currentBalance}
        onBankBalanceChange={handleBankBalanceChange}
      />
    </motion.div>
  );
};

export default BankModule;