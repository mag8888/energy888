import React, { useState, useEffect } from 'react';
import BankModule from './bank-module/src/BankModule';
// import type { Transaction } from './bank-module/src/BankModule';

interface Transaction {
  id: string;
  type: 'initial' | 'transfer' | 'received' | 'expense' | 'credit' | 'payday' | 'charity';
  amount: number;
  description: string;
  timestamp: string;
  from: string;
  to: string;
  status: 'completed' | 'pending' | 'failed';
  balanceAfter: number;
}

interface Player {
  id: string;
  name: string;
  position?: number;
  money?: number;
  isReady: boolean;
  profession?: string;
  dream?: string;
  socketId?: string;
}


interface FullGameBoardProps {
  players: Player[];
  currentPlayer?: Player;
  currentIndex?: number;
  onRollDice: () => void;
  onBuyCard: (cardId: string, price: number) => void;
  onGetGameState: () => void;
  isMyTurn: boolean;
}

// 24 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
const INNER_CELLS = [
  { id: 1, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ' },
  { id: 2, type: 'expenses', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞', color: '#EC4899', icon: 'üõçÔ∏è' },
  { id: 3, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ' },
  { id: 4, type: 'charity', name: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', color: '#F97316', icon: '‚ù§Ô∏è' },
  { id: 5, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ' },
  { id: 6, type: 'payday', name: 'PayDay', color: '#EAB308', icon: 'üí∞' },
  { id: 7, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ' },
  { id: 8, type: 'market', name: '–†—ã–Ω–æ–∫', color: '#06B6D4', icon: 'üè™' },
  { id: 9, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ' },
  { id: 10, type: 'expenses', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞', color: '#EC4899', icon: 'üõçÔ∏è' },
  { id: 11, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ' },
  { id: 12, type: 'child', name: '–†–µ–±–µ–Ω–æ–∫', color: '#A855F7', icon: 'üë∂' },
  { id: 13, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ' },
  { id: 14, type: 'payday', name: 'PayDay', color: '#EAB308', icon: 'üí∞' },
  { id: 15, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ' },
  { id: 16, type: 'market', name: '–†—ã–Ω–æ–∫', color: '#06B6D4', icon: 'üè™' },
  { id: 17, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ' },
  { id: 18, type: 'expenses', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞', color: '#EC4899', icon: 'üõçÔ∏è' },
  { id: 19, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ' },
  { id: 20, type: 'loss', name: '–ü–æ—Ç–µ—Ä—è', color: '#18181B', icon: 'üí∏' },
  { id: 21, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ' },
  { id: 22, type: 'payday', name: 'PayDay', color: '#EAB308', icon: 'üí∞' },
  { id: 23, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ' },
  { id: 24, type: 'market', name: '–†—ã–Ω–æ–∫', color: '#06B6D4', icon: 'üè™' }
];

// 52 –≤–Ω–µ—à–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
const OUTER_CELLS = Array.from({ length: 52 }, (_, i) => ({
  id: i + 25,
  type: ['business', 'property', 'stocks', 'opportunity', 'expenses', 'chance'][i % 6],
  name: `–ö–ª–µ—Ç–∫–∞ ${i + 25}`,
  color: ['#4CAF50', '#2196F3', '#FF9800', '#10B981', '#EC4899', '#FFC107'][i % 6],
  icon: ['üíº', 'üè†', 'üìà', 'üéØ', 'üõçÔ∏è', 'üé≤'][i % 6]
}));

const FullGameBoard: React.FC<FullGameBoardProps> = ({
  players,
  currentPlayer,
  currentIndex,
  onRollDice,
  onBuyCard,
  onGetGameState,
  isMyTurn
}) => {
  const [diceValue, setDiceValue] = useState<number | null>(null);
  const [isRolling, setIsRolling] = useState(false);
  const [showAssets, setShowAssets] = useState(false);
  const [timeLeft, setTimeLeft] = useState(120); // 2 –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const [hasRolled, setHasRolled] = useState(false);
  const [rollTime, setRollTime] = useState(0);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ö–æ–¥–æ–≤
  const [gameStarted, setGameStarted] = useState(false);
  const [shuffling, setShuffling] = useState(false);
  const [shuffleTime, setShuffleTime] = useState(10);
  const [turnOrder, setTurnOrder] = useState<Player[]>([]);
  const [currentTurnIndex, setCurrentTurnIndex] = useState(0);
  const [playerPositions, setPlayerPositions] = useState<{[key: string]: number}>({});
  const [isMoving, setIsMoving] = useState(false);
  const [canPassTurn, setCanPassTurn] = useState(false);

  // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
  const getBoardSize = () => {
    if (typeof window === 'undefined') return 800;
    if (window.innerWidth < 768) return Math.min(window.innerWidth * 0.9, 400);
    if (window.innerWidth < 1024) return 600;
    return 800;
  };

  const getScale = () => {
    const boardSize = getBoardSize();
    return boardSize / 800; // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä 800px
  };

  const boardSize = getBoardSize();
  const scale = getScale();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
  const shufflePlayers = (players: Player[]) => {
    const shuffled = [...players];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
  const getCurrentPlayer = () => {
    if (turnOrder.length === 0) return null;
    return turnOrder[currentTurnIndex];
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É
  const nextTurn = () => {
    setCurrentTurnIndex((prev) => (prev + 1) % turnOrder.length);
    setHasRolled(false);
    setCanPassTurn(false);
    setTimeLeft(120); // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è —Ñ–∏—à–∫–∏
  const movePlayerPiece = async (playerId: string, steps: number) => {
    setIsMoving(true);
    const currentPosition = playerPositions[playerId] || 0;
    
    for (let i = 1; i <= steps; i++) {
      const newPosition = (currentPosition + i) % 24; // 24 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
      setPlayerPositions(prev => ({
        ...prev,
        [playerId]: newPosition
      }));
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ 0.5 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∫–ª–µ—Ç–∫—É
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    setIsMoving(false);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
  const startGame = () => {
    setGameStarted(true);
    setShuffling(true);
    setShuffleTime(10);
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    const shuffledPlayers = shufflePlayers(players);
    setTurnOrder(shuffledPlayers);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
    const initialPositions: {[key: string]: number} = {};
    shuffledPlayers.forEach(player => {
      initialPositions[player.id] = 0; // –í—Å–µ –Ω–∞—á–∏–Ω–∞—é—Ç —Å –∫–ª–µ—Ç–∫–∏ 0
    });
    setPlayerPositions(initialPositions);
  };

  const handleRollDice = async () => {
    if (isRolling || isMoving) return;
    
    setIsRolling(true);
    setDiceValue(null);
    setHasRolled(true);
    setRollTime(Date.now());
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
    setTimeout(async () => {
      const value = Math.floor(Math.random() * 6) + 1;
      setDiceValue(value);
      setIsRolling(false);
      
      // –î–≤–∏–∂–µ–Ω–∏–µ —Ñ–∏—à–∫–∏
      const currentPlayer = getCurrentPlayer();
      if (currentPlayer) {
        await movePlayerPiece(currentPlayer.id, value);
      }
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–¥–∞—Ç—å —Ö–æ–¥" —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        setCanPassTurn(true);
      }, 5000);
      
      onRollDice();
    }, 1000);
  };

  const handleEndTurn = () => {
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É
    nextTurn();
    setRollTime(0);
  };

  // –¢–∞–π–º–µ—Ä –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
  useEffect(() => {
    if (!shuffling) return;

    const timer = setInterval(() => {
      setShuffleTime(prev => {
        if (prev <= 1) {
          setShuffling(false);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [shuffling]);

  // –¢–∞–π–º–µ—Ä —Ö–æ–¥–∞
  useEffect(() => {
    if (!gameStarted || shuffling) {
      setTimeLeft(120);
      setHasRolled(false);
      setRollTime(0);
      return;
    }

    const currentPlayer = getCurrentPlayer();
    if (!currentPlayer || currentPlayer.id !== currentPlayer?.id) {
      setTimeLeft(120);
      setHasRolled(false);
      setRollTime(0);
      return;
    }

    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 0) {
          // –í—Ä–µ–º—è –≤—ã—à–ª–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞
          handleEndTurn();
          return 120;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [gameStarted, shuffling, currentTurnIndex, turnOrder]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –∫–Ω–æ–ø–∫–∏ –≤ "–ø–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞"
  useEffect(() => {
    if (hasRolled && rollTime > 0) {
      const timeSinceRoll = Date.now() - rollTime;
      if (timeSinceRoll >= 10000) { // 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –±—Ä–æ—Å–∫–∞
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å—Ç–∞—Ç—å "–ø–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞"
      }
    }
  }, [hasRolled, rollTime]);

  // –†–µ–Ω–¥–µ—Ä –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫ (24 –≤ –∫—Ä—É–≥–µ) - –ê–î–ê–ü–¢–ò–í–ù–´–ï –†–ê–ó–ú–ï–†–´
  const renderInnerCells = () => {
    return INNER_CELLS.map((cell, index) => {
      const angle = (index * 360) / 24;
      const radius = 168 * scale; // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–¥–∏—É—Å
      const centerX = boardSize / 2;
      const centerY = boardSize / 2;
      const x = centerX + Math.cos((angle - 90) * Math.PI / 180) * radius;
      const y = centerY + Math.sin((angle - 90) * Math.PI / 180) * radius;
      
      return (
        <div
          key={cell.id}
          style={{
            position: 'absolute',
            left: x - (28 * scale),
            top: y - (28 * scale),
            width: 56 * scale,
            height: 56 * scale,
            background: cell.color,
            borderRadius: `${11 * scale}px`,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: `${22 * scale}px`,
            color: 'white',
            fontWeight: 'bold',
            boxShadow: `0 ${3 * scale}px ${11 * scale}px rgba(0,0,0,0.3)`,
            cursor: 'pointer',
            transition: 'all 0.3s ease',
            zIndex: 2
          }}
          title={`${cell.name} (${cell.id})`}
        >
          <div style={{ position: 'relative', width: '100%', height: '100%' }}>
            {/* –ù–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É */}
            <div style={{
              position: 'absolute',
              bottom: `${2 * scale}px`,
              left: `${2 * scale}px`,
              fontSize: `${8 * scale}px`,
              fontWeight: 'bold',
              color: 'rgba(0, 0, 0, 0.8)',
              background: 'rgba(255, 255, 255, 0.9)',
              borderRadius: '50%',
              width: `${12 * scale}px`,
              height: `${12 * scale}px`,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              lineHeight: '1'
            }}>
              {cell.id}
            </div>
            {/* –ò–∫–æ–Ω–∫–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ */}
            <div style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              width: '100%',
              height: '100%'
            }}>
              {cell.icon}
            </div>
          </div>
        </div>
      );
    });
  };

  // –†–µ–Ω–¥–µ—Ä –≤–Ω–µ—à–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫ (52 –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ) - –°–ò–ú–ú–ï–¢–†–ò–ß–ù–û
  const renderOuterCells = () => {
    const cells = [];
    const cellSize = 46; // –£–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ 15% —Å 40 –¥–æ 46
    const spacing = 2;
    const boardWidth = 14 * (cellSize + spacing) - spacing; // –û–±—â–∞—è —à–∏—Ä–∏–Ω–∞ –¥–æ—Å–∫–∏
    const boardHeight = 14 * (cellSize + spacing) - spacing; // –û–±—â–∞—è –≤—ã—Å–æ—Ç–∞ –¥–æ—Å–∫–∏
    const startX = (800 - boardWidth) / 2; // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    const startY = (800 - boardHeight) / 2; // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    
    // –í–µ—Ä—Ö–Ω–∏–π —Ä—è–¥ (14 –∫–ª–µ—Ç–æ–∫)
    for (let i = 0; i < 14; i++) {
      const cell = OUTER_CELLS[i];
      const x = startX + i * (cellSize + spacing);
      const y = startY;
      cells.push(
        <div
          key={`top-${cell.id}`}
          style={{
            position: 'absolute',
            left: x,
            top: y,
            width: cellSize,
            height: cellSize,
            background: cell.color,
            borderRadius: '5px', // –£–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ 15% —Å 4px –¥–æ 5px
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '14px', // –£–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ 15% —Å 12px –¥–æ 14px
            color: 'white',
            fontWeight: 'bold',
            boxShadow: '0 2px 5px rgba(0,0,0,0.3)', // –£–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ 15%
            cursor: 'pointer',
            transition: 'all 0.3s ease',
            zIndex: 2
          }}
          title={`${cell.name} (${cell.id})`}
        >
          <div style={{ position: 'relative', width: '100%', height: '100%' }}>
            {/* –ù–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É */}
            <div style={{
              position: 'absolute',
              top: '1px',
              left: '1px',
              fontSize: '6px',
              fontWeight: 'bold',
              color: 'rgba(0, 0, 0, 0.8)',
              background: 'rgba(255, 255, 255, 0.9)',
              borderRadius: '50%',
              width: '10px',
              height: '10px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              lineHeight: '1'
            }}>
              {cell.id}
            </div>
            {/* –ò–∫–æ–Ω–∫–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ */}
            <div style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              width: '100%',
              height: '100%'
            }}>
              {cell.icon}
            </div>
          </div>
        </div>
      );
    }
    
    // –ü—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (12 –∫–ª–µ—Ç–æ–∫) - –°–ò–ú–ú–ï–¢–†–ò–ß–ù–û
    for (let i = 0; i < 12; i++) {
      const cell = OUTER_CELLS[14 + i];
      const x = startX + 13 * (cellSize + spacing); // –ü—Ä–∞–≤—ã–π –∫—Ä–∞–π –¥–æ—Å–∫–∏
      const y = startY + (i + 1) * (cellSize + spacing);
      cells.push(
        <div
          key={`right-${cell.id}`}
          style={{
            position: 'absolute',
            left: x,
            top: y,
            width: cellSize,
            height: cellSize,
            background: cell.color,
            borderRadius: '5px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '14px',
            color: 'white',
            fontWeight: 'bold',
            boxShadow: '0 2px 5px rgba(0,0,0,0.3)',
            cursor: 'pointer',
            transition: 'all 0.3s ease',
            zIndex: 2
          }}
          title={`${cell.name} (${cell.id})`}
        >
          <div style={{ position: 'relative', width: '100%', height: '100%' }}>
            {/* –ù–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É */}
            <div style={{
              position: 'absolute',
              top: '1px',
              left: '1px',
              fontSize: '6px',
              fontWeight: 'bold',
              color: 'rgba(0, 0, 0, 0.8)',
              background: 'rgba(255, 255, 255, 0.9)',
              borderRadius: '50%',
              width: '10px',
              height: '10px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              lineHeight: '1'
            }}>
              {cell.id}
            </div>
            {/* –ò–∫–æ–Ω–∫–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ */}
            <div style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              width: '100%',
              height: '100%'
            }}>
              {cell.icon}
            </div>
          </div>
        </div>
      );
    }
    
    // –ù–∏–∂–Ω–∏–π —Ä—è–¥ (14 –∫–ª–µ—Ç–æ–∫, —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ) - –°–ò–ú–ú–ï–¢–†–ò–ß–ù–û
    for (let i = 0; i < 14; i++) {
      const cell = OUTER_CELLS[26 + i];
      const x = startX + (13 - i) * (cellSize + spacing);
      const y = startY + 13 * (cellSize + spacing);
      cells.push(
        <div
          key={`bottom-${cell.id}`}
          style={{
            position: 'absolute',
            left: x,
            top: y,
            width: cellSize,
            height: cellSize,
            background: cell.color,
            borderRadius: '5px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '14px',
            color: 'white',
            fontWeight: 'bold',
            boxShadow: '0 2px 5px rgba(0,0,0,0.3)',
            cursor: 'pointer',
            transition: 'all 0.3s ease',
            zIndex: 2
          }}
          title={`${cell.name} (${cell.id})`}
        >
          <div style={{ position: 'relative', width: '100%', height: '100%' }}>
            {/* –ù–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É */}
            <div style={{
              position: 'absolute',
              top: '1px',
              left: '1px',
              fontSize: '6px',
              fontWeight: 'bold',
              color: 'rgba(0, 0, 0, 0.8)',
              background: 'rgba(255, 255, 255, 0.9)',
              borderRadius: '50%',
              width: '10px',
              height: '10px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              lineHeight: '1'
            }}>
              {cell.id}
            </div>
            {/* –ò–∫–æ–Ω–∫–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ */}
            <div style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              width: '100%',
              height: '100%'
            }}>
              {cell.icon}
            </div>
          </div>
        </div>
      );
    }
    
    // –õ–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (12 –∫–ª–µ—Ç–æ–∫, —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö) - –°–ò–ú–ú–ï–¢–†–ò–ß–ù–û
    for (let i = 0; i < 12; i++) {
      const cell = OUTER_CELLS[40 + i];
      const x = startX; // –õ–µ–≤—ã–π –∫—Ä–∞–π –¥–æ—Å–∫–∏
      const y = startY + (12 - i) * (cellSize + spacing);
      cells.push(
        <div
          key={`left-${cell.id}`}
          style={{
            position: 'absolute',
            left: x,
            top: y,
            width: cellSize,
            height: cellSize,
            background: cell.color,
            borderRadius: '5px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '14px',
            color: 'white',
            fontWeight: 'bold',
            boxShadow: '0 2px 5px rgba(0,0,0,0.3)',
            cursor: 'pointer',
            transition: 'all 0.3s ease',
            zIndex: 2
          }}
          title={`${cell.name} (${cell.id})`}
        >
          <div style={{ position: 'relative', width: '100%', height: '100%' }}>
            {/* –ù–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É */}
            <div style={{
              position: 'absolute',
              top: '1px',
              left: '1px',
              fontSize: '6px',
              fontWeight: 'bold',
              color: 'rgba(0, 0, 0, 0.8)',
              background: 'rgba(255, 255, 255, 0.9)',
              borderRadius: '50%',
              width: '10px',
              height: '10px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              lineHeight: '1'
            }}>
              {cell.id}
            </div>
            {/* –ò–∫–æ–Ω–∫–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ */}
            <div style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              width: '100%',
              height: '100%'
            }}>
              {cell.icon}
            </div>
          </div>
        </div>
      );
    }
    
    return cells;
  };

  // –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–¥–µ–ª–æ–∫ –≤ —É–≥–ª–∞—Ö –º–µ–∂–¥—É –≤–Ω–µ—à–Ω–∏–º–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –∫–ª–µ—Ç–∫–∞–º–∏
  const renderDealCards = () => {
    const cardSize = 60 * scale;
    const cardHeight = 80 * scale;
    
    return (
      <>
        {/* –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª - –ë–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ */}
        <div
          style={{
            position: 'absolute',
            left: 130 * scale,
            top: 130 * scale,
            width: cardSize,
            height: cardHeight,
            background: 'linear-gradient(135deg, #FFD700 0%, #FFA500 100%)',
            borderRadius: `${12 * scale}px`,
            border: `${3 * scale}px solid #FF6B35`,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            boxShadow: `0 ${8 * scale}px ${25 * scale}px rgba(255, 215, 0, 0.6)`,
            zIndex: 3,
            cursor: 'pointer',
            transition: 'all 0.3s ease'
          }}
          title="–ë–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞"
        >
          <div style={{ fontSize: `${24 * scale}px`, marginBottom: `${4 * scale}px` }}>üí∞</div>
          <div style={{ fontSize: `${8 * scale}px`, fontWeight: 'bold', textAlign: 'center', color: '#8B4513' }}>
            –ë–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞
          </div>
        </div>

        {/* –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª - –ú–∞–ª–∞—è —Å–¥–µ–ª–∫–∞ */}
        <div
          style={{
            position: 'absolute',
            right: 130 * scale,
            top: 130 * scale,
            width: cardSize,
            height: cardHeight,
            background: 'linear-gradient(135deg, #32CD32 0%, #228B22 100%)',
            borderRadius: `${12 * scale}px`,
            border: `${3 * scale}px solid #FF6B35`,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            boxShadow: `0 ${8 * scale}px ${25 * scale}px rgba(50, 205, 50, 0.6)`,
            zIndex: 3,
            cursor: 'pointer',
            transition: 'all 0.3s ease'
          }}
          title="–ú–∞–ª–∞—è —Å–¥–µ–ª–∫–∞"
        >
          <div style={{ fontSize: `${24 * scale}px`, marginBottom: `${4 * scale}px` }}>üíº</div>
          <div style={{ fontSize: `${8 * scale}px`, fontWeight: 'bold', textAlign: 'center', color: 'white' }}>
            –ú–∞–ª–∞—è —Å–¥–µ–ª–∫–∞
          </div>
        </div>

        {/* –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª - –†—ã–Ω–æ–∫ */}
        <div
          style={{
            position: 'absolute',
            right: 130 * scale,
            bottom: 130 * scale,
            width: cardSize,
            height: cardHeight,
            background: 'linear-gradient(135deg, #4169E1 0%, #0000CD 100%)',
            borderRadius: `${12 * scale}px`,
            border: `${3 * scale}px solid #FF6B35`,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            boxShadow: `0 ${8 * scale}px ${25 * scale}px rgba(65, 105, 225, 0.6)`,
            zIndex: 3,
            cursor: 'pointer',
            transition: 'all 0.3s ease'
          }}
          title="–†—ã–Ω–æ–∫"
        >
          <div style={{ fontSize: `${24 * scale}px`, marginBottom: `${4 * scale}px` }}>üè™</div>
          <div style={{ fontSize: `${8 * scale}px`, fontWeight: 'bold', textAlign: 'center', color: 'white' }}>
            –†—ã–Ω–æ–∫
          </div>
        </div>

        {/* –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª - –†–∞—Å—Ö–æ–¥—ã */}
        <div
          style={{
            position: 'absolute',
            left: 130 * scale,
            bottom: 130 * scale,
            width: cardSize,
            height: cardHeight,
            background: 'linear-gradient(135deg, #DC143C 0%, #B22222 100%)',
            borderRadius: `${12 * scale}px`,
            border: `${3 * scale}px solid #FF6B35`,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            boxShadow: `0 ${8 * scale}px ${25 * scale}px rgba(220, 20, 60, 0.6)`,
            zIndex: 3,
            cursor: 'pointer',
            transition: 'all 0.3s ease'
          }}
          title="–†–∞—Å—Ö–æ–¥—ã"
        >
          <div style={{ fontSize: `${24 * scale}px`, marginBottom: `${4 * scale}px` }}>üí∏</div>
          <div style={{ fontSize: `${8 * scale}px`, fontWeight: 'bold', textAlign: 'center', color: 'white' }}>
            –†–∞—Å—Ö–æ–¥—ã
          </div>
        </div>
      </>
    );
  };

  // –†–µ–Ω–¥–µ—Ä —Ñ–∏—à–µ–∫ –∏–≥—Ä–æ–∫–æ–≤
  const renderPlayerTokens = () => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º turnOrder –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    const playersToRender = gameStarted ? turnOrder : players;
    
    return playersToRender.map((player, index) => {
      const color = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7'][index % 5];
      const position = playerPositions[player.id] || 0;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ –∫–ª–µ—Ç–∫–∏
      const angle = (position * 360) / 24;
      const radius = 168 * scale;
      const centerX = boardSize / 2;
      const centerY = boardSize / 2;
      const x = centerX + Math.cos((angle - 90) * Math.PI / 180) * radius;
      const y = centerY + Math.sin((angle - 90) * Math.PI / 180) * radius;
      
      // –°–º–µ—â–∞–µ–º —Ñ–∏—à–∫–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–ª–∏—Å—å
      const offsetX = (index % 2) * 20 - 10;
      const offsetY = Math.floor(index / 2) * 20 - 10;
      
      return (
        <div
          key={player.id}
          style={{
            position: 'absolute',
            left: x - 10 + offsetX,
            top: y - 10 + offsetY,
            width: 20 * scale,
            height: 20 * scale,
            background: color,
            borderRadius: '50%',
            border: `${2 * scale}px solid white`,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: `${10 * scale}px`,
            color: 'white',
            fontWeight: 'bold',
            boxShadow: `0 ${2 * scale}px ${8 * scale}px rgba(0,0,0,0.3)`,
            zIndex: 4,
            transition: 'all 0.5s ease'
          }}
          title={`${player.name} (${player.profession || '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å'}) - –ü–æ–∑–∏—Ü–∏—è: ${position + 1}`}
        >
          {index + 1}
        </div>
      );
    });
  };

  return (
    <div style={{
      display: 'flex',
      gap: '20px',
      maxWidth: '1200px',
      margin: '0 auto',
      flexDirection: window.innerWidth < 1024 ? 'column' : 'row',
      alignItems: 'center',
      padding: '20px'
    }}>
      {/* –ò–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞ */}
      <div style={{
        position: 'relative',
        width: `${boardSize}px`,
        height: `${boardSize}px`,
        background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%)',
        borderRadius: `${20 * scale}px`,
        border: `${3 * scale}px solid rgba(255, 255, 255, 0.2)`,
        boxShadow: `0 ${20 * scale}px ${40 * scale}px rgba(0, 0, 0, 0.5)`,
        overflow: 'hidden'
      }}>
      {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
      <div
        style={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          zIndex: 2
        }}
      >
        <div
          style={{
            width: `${160 * scale}px`,
            height: `${160 * scale}px`,
            background: 'linear-gradient(135deg, #FFD700 0%, #FFA500 50%, #FF8C00 100%)',
            borderRadius: '50%',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            boxShadow: `0 ${8 * scale}px ${32 * scale}px rgba(255, 215, 0, 0.4), 0 0 0 ${4 * scale}px rgba(255, 215, 0, 0.2)`,
            position: 'relative',
            overflow: 'hidden'
          }}
        >
          {/* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º */}
          <div
            style={{
              width: `${140 * scale}px`,
              height: `${140 * scale}px`,
              background: 'radial-gradient(circle, #000000 0%, #1a1a1a 100%)',
              borderRadius: '50%',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              position: 'relative'
            }}
          >
            {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ */}
            <div
              style={{
                fontSize: `${48 * scale}px`,
                fontWeight: 'bold',
                color: '#FFD700',
                textShadow: `0 0 ${20 * scale}px rgba(255, 215, 0, 0.8), 0 0 ${40 * scale}px rgba(255, 165, 0, 0.6)`,
                zIndex: 3,
                position: 'relative',
                animation: isRolling ? 'diceRoll 0.1s infinite' : 'none'
              }}
            >
              {diceValue || 'üé≤'}
            </div>
            
            {/* –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ª–∏–Ω–∏–∏ */}
            <div
              style={{
                position: 'absolute',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                borderRadius: '50%',
                background: 'conic-gradient(from 0deg, transparent 0deg, rgba(255, 215, 0, 0.3) 45deg, transparent 90deg, rgba(255, 165, 0, 0.3) 135deg, transparent 180deg, rgba(255, 140, 0, 0.3) 225deg, transparent 270deg, rgba(255, 215, 0, 0.3) 315deg, transparent 360deg)',
                animation: 'rotate 4s linear infinite'
              }}
            />
            
            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ—Ç—è—â–∏–µ—Å—è —Ç–æ—á–∫–∏ */}
            <div
              style={{
                position: 'absolute',
                width: '100%',
                height: '100%',
                borderRadius: '50%'
              }}
            >
              {[0, 60, 120, 180, 240, 300].map((angle, index) => (
                <div
                  key={index}
                  style={{
                    position: 'absolute',
                    width: `${6 * scale}px`,
                    height: `${6 * scale}px`,
                    background: '#FFD700',
                    borderRadius: '50%',
                    top: '50%',
                    left: '50%',
                    transform: `translate(-50%, -50%) rotate(${angle}deg) translateY(-50px)`,
                    boxShadow: '0 0 10px rgba(255, 215, 0, 0.8)',
                    animation: `pulse ${2 + index * 0.3}s ease-in-out infinite`
                  }}
                />
              ))}
            </div>
          </div>
          
          {/* –í–Ω–µ—à–Ω–∏–µ –º–æ–Ω–µ—Ç—ã */}
          <div
            style={{
              position: 'absolute',
              width: '100%',
              height: '100%',
              borderRadius: '50%'
            }}
          >
            {[45, 135, 225, 315].map((angle, index) => (
              <div
                key={index}
                style={{
                  position: 'absolute',
                  width: '24px',
                  height: '24px',
                  background: 'radial-gradient(circle, #FFD700 0%, #FFA500 100%)',
                  borderRadius: '50%',
                  top: '50%',
                  left: '50%',
                  transform: `translate(-50%, -50%) rotate(${angle}deg) translateY(-70px)`,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  boxShadow: '0 2px 8px rgba(255, 215, 0, 0.6)',
                  border: '2px solid #FFD700'
                }}
              >
                <div
                  style={{
                    fontSize: '12px',
                    fontWeight: 'bold',
                    color: '#000000'
                  }}
                >
                  $
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥ (24 –∫–ª–µ—Ç–∫–∏) - –£–ú–ï–ù–¨–®–ï–ù –ù–ê 30% */}
      {renderInnerCells()}

      {/* –í–Ω–µ—à–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç (52 –∫–ª–µ—Ç–∫–∏) - –£–í–ï–õ–ò–ß–ï–ù–´ –ù–ê 15% */}
      {renderOuterCells()}

      {/* –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–¥–µ–ª–æ–∫ –≤ —É–≥–ª–∞—Ö */}
      {renderDealCards()}

      {/* –§–∏—à–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ */}
      {renderPlayerTokens()}
      </div>

      {/* –ü—Ä–∞–≤–æ–µ –º–µ–Ω—é (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ –ª–µ–≤–æ–≥–æ) */}
      <div style={{
        width: '300px',
        background: 'rgba(0, 0, 0, 0.8)',
        backdropFilter: 'blur(15px)',
        borderRadius: '20px',
        border: '2px solid rgba(255, 255, 255, 0.2)',
        boxShadow: '0 20px 40px rgba(0, 0, 0, 0.5)',
        padding: '20px',
        display: 'flex',
        flexDirection: 'column',
        gap: '20px'
      }}>
        {/* 1. –ú–æ–¥—É–ª—å –±–∞–Ω–∫–∞ - –ü–û–î–ù–Ø–¢ –í–í–ï–†–• */}
        <div>
          <BankModule
            playerData={currentPlayer}
            gamePlayers={players}
            socket={null}
            bankBalance={currentPlayer?.money || 0}
            playerCredit={0}
            getMaxCredit={() => 10000}
            getCashFlow={() => 1200}
            setShowCreditModal={() => {}}
            roomId="demo-room"
            onBankBalanceChange={() => {}}
          />
        </div>


        {/* 3. –ê–∫—Ç–∏–≤—ã - –ö–ù–û–ü–ö–ê –° –†–ê–°–ö–†–´–í–ê–ï–ú–´–ú –°–ü–ò–°–ö–û–ú */}
        <div style={{
          background: 'rgba(76, 175, 80, 0.1)',
          padding: '15px',
          borderRadius: '12px',
          border: '1px solid rgba(76, 175, 80, 0.3)'
        }}>
          <button
            onClick={() => setShowAssets(!showAssets)}
            style={{
              width: '100%',
              padding: '15px',
              background: 'linear-gradient(45deg, #4CAF50, #45a049)',
              color: 'white',
              border: 'none',
              borderRadius: '12px',
              cursor: 'pointer',
              fontSize: '16px',
              fontWeight: 'bold',
              transition: 'all 0.3s ease',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: '10px'
            }}
          >
            üíº –ê–∫—Ç–∏–≤—ã {showAssets ? '‚ñ≤' : '‚ñº'}
          </button>
          
          {showAssets && (
            <div style={{ 
              marginTop: '15px', 
              display: 'flex', 
              flexDirection: 'column', 
              gap: '8px' 
            }}>
              <div style={{
                background: 'rgba(255, 255, 255, 0.1)',
                padding: '10px',
                borderRadius: '8px',
                border: '1px solid rgba(255, 255, 255, 0.2)',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
              }}>
                <span style={{ color: 'white', fontSize: '14px' }}>üè† –î–æ–º</span>
                <span style={{ color: '#4CAF50', fontSize: '14px', fontWeight: 'bold' }}>$150,000</span>
              </div>
              <div style={{
                background: 'rgba(255, 255, 255, 0.1)',
                padding: '10px',
                borderRadius: '8px',
                border: '1px solid rgba(255, 255, 255, 0.2)',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
              }}>
                <span style={{ color: 'white', fontSize: '14px' }}>üìà –ê–∫—Ü–∏–∏</span>
                <span style={{ color: '#4CAF50', fontSize: '14px', fontWeight: 'bold' }}>$25,000</span>
              </div>
              <div style={{
                background: 'rgba(255, 255, 255, 0.1)',
                padding: '10px',
                borderRadius: '8px',
                border: '1px solid rgba(255, 255, 255, 0.2)',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
              }}>
                <span style={{ color: 'white', fontSize: '14px' }}>üíº –ë–∏–∑–Ω–µ—Å</span>
                <span style={{ color: '#4CAF50', fontSize: '14px', fontWeight: 'bold' }}>$80,000</span>
              </div>
            </div>
          )}
        </div>

        {/* 4. –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
        <div style={{
          background: 'rgba(76, 175, 80, 0.1)',
          padding: '15px',
          borderRadius: '12px',
          border: '1px solid rgba(76, 175, 80, 0.3)'
        }}>
          <h3 style={{ 
            color: '#4CAF50', 
            margin: '0 0 15px 0', 
            fontSize: '18px',
            fontWeight: 'bold',
            textAlign: 'center'
          }}>
            –î–µ–π—Å—Ç–≤–∏—è
          </h3>
          <button
            onClick={hasRolled && (Date.now() - rollTime) >= 10000 ? handleEndTurn : handleRollDice}
            disabled={!isMyTurn || isRolling}
            style={{
              width: '100%',
              padding: '15px',
              background: isMyTurn && !isRolling 
                ? hasRolled && (Date.now() - rollTime) >= 10000
                  ? 'linear-gradient(45deg, #FF9800, #F57C00)'
                  : 'linear-gradient(45deg, #4CAF50, #45a049)'
                : 'rgba(255, 255, 255, 0.2)',
              color: 'white',
              border: 'none',
              borderRadius: '12px',
              cursor: isMyTurn && !isRolling ? 'pointer' : 'not-allowed',
              fontSize: '16px',
              fontWeight: 'bold',
              transition: 'all 0.3s ease',
              marginBottom: '10px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: '10px'
            }}
          >
            {isRolling ? (
              <>
                <div style={{
                  animation: 'spin 1s linear infinite',
                  fontSize: '20px'
                }}>
                  üé≤
                </div>
                –ë—Ä–æ—Å–æ–∫...
              </>
            ) : hasRolled && (Date.now() - rollTime) >= 10000 ? (
              <>
                ‚è≠Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞
                {diceValue && <span style={{ fontSize: '12px' }}>({diceValue})</span>}
              </>
            ) : (
              <>
                üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
                {diceValue && <span style={{ fontSize: '12px' }}>({diceValue})</span>}
              </>
            )}
          </button>
          
          {/* –ê–Ω–∏–º–∞—Ü–∏—è –∫—É–±–∏–∫–∞ –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π */}
          {isRolling && (
            <div style={{
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
              height: '60px',
              background: 'rgba(255, 255, 255, 0.1)',
              borderRadius: '10px',
              marginTop: '10px'
            }}>
              <div style={{
                fontSize: '40px',
                animation: 'bounce 0.5s ease-in-out infinite alternate'
              }}>
                üé≤
              </div>
            </div>
          )}
        </div>

        {/* 5. –®–∫–∞–ª–∞ —Ç–∞–π–º–∏–Ω–≥–∞ */}
        <div style={{
          background: 'rgba(76, 175, 80, 0.1)',
          padding: '15px',
          borderRadius: '12px',
          border: '1px solid rgba(76, 175, 80, 0.3)'
        }}>
          <h3 style={{ 
            color: '#4CAF50', 
            margin: '0 0 15px 0', 
            fontSize: '18px',
            fontWeight: 'bold',
            textAlign: 'center'
          }}>
            –í—Ä–µ–º—è —Ö–æ–¥–∞
          </h3>
          <div style={{
            background: 'rgba(255, 255, 255, 0.1)',
            padding: '15px',
            borderRadius: '10px',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            <div style={{
              width: '100%',
              height: '8px',
              background: 'rgba(255, 255, 255, 0.2)',
              borderRadius: '4px',
              overflow: 'hidden',
              marginBottom: '10px'
            }}>
              <div style={{
                width: `${(timeLeft / 120) * 100}%`,
                height: '100%',
                background: timeLeft > 60 
                  ? 'linear-gradient(90deg, #4CAF50, #8BC34A)' // –ó–µ–ª–µ–Ω–∞—è –ø–æ–ª–æ—Å–∞ (–ø–µ—Ä–≤–∞—è –º–∏–Ω—É—Ç–∞)
                  : timeLeft > 20 
                    ? 'linear-gradient(90deg, #FFC107, #FF9800)' // –ñ–µ–ª—Ç–∞—è –ø–æ–ª–æ—Å–∞ (–≤—Ç–æ—Ä–∞—è –º–∏–Ω—É—Ç–∞)
                    : 'linear-gradient(90deg, #F44336, #E91E63)', // –ö—Ä–∞—Å–Ω–∞—è –ø–æ–ª–æ—Å–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–µ–∫)
                borderRadius: '4px',
                transition: 'width 0.3s ease, background 0.3s ease'
              }} />
            </div>
            <div style={{ 
              color: timeLeft > 60 
                ? 'rgba(255, 255, 255, 0.8)' 
                : timeLeft > 20 
                  ? '#FFC107' 
                  : '#F44336',
              fontSize: '12px',
              textAlign: 'center',
              fontWeight: 'bold'
            }}>
              {Math.floor(timeLeft / 60)}:{(timeLeft % 60).toString().padStart(2, '0')} / 2:00
            </div>
            {timeLeft <= 20 && (
              <div style={{
                color: '#F44336',
                fontSize: '10px',
                textAlign: 'center',
                marginTop: '5px',
                animation: 'blink 1s infinite'
              }}>
                ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!
              </div>
            )}
          </div>
        </div>

        {/* 6. –û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤ - –°–ú–ï–©–ï–ù–ê –í–ù–ò–ó */}
        <div style={{
          background: 'rgba(76, 175, 80, 0.1)',
          padding: '15px',
          borderRadius: '12px',
          border: '1px solid rgba(76, 175, 80, 0.3)'
        }}>
          <h3 style={{ 
            color: '#4CAF50', 
            margin: '0 0 15px 0', 
            fontSize: '18px',
            fontWeight: 'bold',
            textAlign: 'center'
          }}>
            –û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤
          </h3>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
            {(gameStarted ? turnOrder : players).map((player, index) => {
              const isCurrentTurn = gameStarted && index === currentTurnIndex;
              const isMyPlayer = player.id === currentPlayer?.id;
              
              return (
                <div
                  key={player.id}
                  style={{
                    background: isCurrentTurn 
                      ? 'linear-gradient(45deg, #4CAF50, #45a049)' 
                      : 'rgba(255, 255, 255, 0.1)',
                    padding: '12px',
                    borderRadius: '10px',
                    border: isCurrentTurn ? '2px solid #4CAF50' : '1px solid rgba(255, 255, 255, 0.2)',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '10px',
                    transition: 'all 0.3s ease',
                    opacity: gameStarted && !isCurrentTurn ? 0.7 : 1
                  }}
                >
                  <div style={{
                    width: '30px',
                    height: '30px',
                    background: ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7'][index % 5],
                    borderRadius: '50%',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    color: 'white',
                    fontWeight: 'bold',
                    fontSize: '14px'
                  }}>
                    {index + 1}
                  </div>
                  <div style={{ flex: 1 }}>
                    <div style={{ color: 'white', fontSize: '14px', fontWeight: 'bold' }}>
                      {player.name}
                    </div>
                    <div style={{ fontSize: '12px', color: '#ccc' }}>
                      {player.profession || '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å'}
                    </div>
                    {gameStarted && (
                      <div style={{ fontSize: '10px', color: '#aaa' }}>
                        –ü–æ–∑–∏—Ü–∏—è: {(playerPositions[player.id] || 0) + 1}
                      </div>
                    )}
                  </div>
                  <div style={{ fontSize: '12px', color: '#ccc', textAlign: 'right' }}>
                    {gameStarted ? (
                      isCurrentTurn ? (
                        isMyPlayer ? 'üéØ –í–∞—à —Ö–æ–¥' : '‚è≥ –•–æ–¥–∏—Ç'
                      ) : '‚è∏Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ'
                    ) : (
                      player.isReady ? '‚úÖ –ì–æ—Ç–æ–≤' : '‚è≥ –ù–µ –≥–æ—Ç–æ–≤'
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {/* 7. –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ - –ü–ï–†–ï–ú–ï–©–ï–ù –í –°–ê–ú–´–ô –ù–ò–ó */}
        <div style={{
          background: 'rgba(76, 175, 80, 0.1)',
          padding: '15px',
          borderRadius: '12px',
          border: '1px solid rgba(76, 175, 80, 0.3)'
        }}>
          <h3 style={{ 
            color: '#4CAF50', 
            margin: '0 0 15px 0', 
            fontSize: '18px',
            fontWeight: 'bold',
            textAlign: 'center'
          }}>
            –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫
          </h3>
          <div style={{
            background: 'rgba(255, 255, 255, 0.1)',
            padding: '15px',
            borderRadius: '10px',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            <div style={{ 
              color: 'white', 
              fontSize: '16px', 
              fontWeight: 'bold',
              marginBottom: '8px'
            }}>
              {players[currentIndex]?.name || currentPlayer?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            </div>
            <div style={{ 
              color: 'rgba(255, 255, 255, 0.7)', 
              fontSize: '14px',
              marginBottom: '5px'
            }}>
              –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {players[currentIndex]?.profession || currentPlayer?.profession || '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å'}
            </div>
            <div style={{ 
              color: 'rgba(255, 255, 255, 0.7)', 
              fontSize: '14px'
            }}>
              –ú–µ—á—Ç–∞: {players[currentIndex]?.dream || currentPlayer?.dream || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}
            </div>
          </div>
        </div>
      </div>
      
      <style jsx>{`
        @keyframes blink {
          0%, 50% { opacity: 1; }
          51%, 100% { opacity: 0.3; }
        }
        @keyframes rotate {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
        @keyframes pulse {
          0%, 100% { opacity: 0.3; transform: scale(1); }
          50% { opacity: 1; transform: scale(1.2); }
        }
        @keyframes diceRoll {
          0% { transform: rotate(0deg) scale(1); }
          25% { transform: rotate(90deg) scale(1.1); }
          50% { transform: rotate(180deg) scale(0.9); }
          75% { transform: rotate(270deg) scale(1.1); }
          100% { transform: rotate(360deg) scale(1); }
        }
      `}</style>
    </div>
  );
};

export default FullGameBoard;