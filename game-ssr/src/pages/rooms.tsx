import { useEffect, useMemo, useState } from 'react';
import { Box, Typography, TextField, Grid, Dialog, DialogTitle, DialogContent, DialogActions, Button, MenuItem, Snackbar, Alert, Chip, Avatar, Stack, Checkbox, FormControlLabel, Divider, Paper } from '@mui/material';
import socket from '@/lib/socket';
import GlassCard from '@/ui/GlassCard';
import GradientButton from '@/ui/GradientButton';
import { useAuth } from '@/lib/auth';
import { getFastTrackDreams } from '@/data/fastTrackCells';
import { PROFESSIONS, getProfession } from '@/data/professions';

export default function RoomsPage() {
  const { user } = useAuth();
  const [rooms, setRooms] = useState<any[]>([]);
  const [openCreate, setOpenCreate] = useState(false);
  const [snack, setSnack] = useState<string|null>(null);
  const [createForm, setCreateForm] = useState({ name: '', maxPlayers: 2, timing: 2, gameDurationSec: 10800, password: '', assignAll: true, dreamId: '', professionId: 'entrepreneur' });
  const dreams = getFastTrackDreams();
  const prof = getProfession(createForm.professionId);
  const [joinPwd, setJoinPwd] = useState('');
  const [joinRoomId, setJoinRoomId] = useState<string | null>(null);

  useEffect(() => {
    const handleRooms = (list:any[]) => {
      console.log('üìã –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç:', list);
      setRooms(list);
    };
    
    console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Socket.IO...');
    console.log('üîå Socket connected:', socket.connected);
    console.log('üîå Socket ID:', socket.id);
    
    socket.on('roomsList', handleRooms);
    socket.emit('getRooms');
    
    return () => { 
      console.log('üîå –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Socket.IO');
      socket.off('roomsList', handleRooms); 
    };
  }, []);

  const doCreate = () => {
    if (!user) { setSnack('–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å'); return; }
    socket.emit('createRoom', {
      id: undefined,
      name: createForm.name || `–ö–æ–º–Ω–∞—Ç–∞ ${user?.username || '–ò–≥—Ä–æ–∫–∞'}`,
      creatorId: user.id,
      creatorUsername: user.username,
      creatorProfession: prof,
      creatorDream: dreams.find(d=>d.id===createForm.dreamId) || null,
      assignProfessionToAll: !!createForm.assignAll,
      maxPlayers: Number(createForm.maxPlayers),
      password: createForm.password || null,
      timing: Number(createForm.timing) * 60, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
      gameDurationSec: Number(createForm.gameDurationSec)
    });
    setOpenCreate(false);
    setSnack('–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞');
  };

  const doJoin = async (room:any) => {
    if (!user) { 
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram
      await handleTelegramAuth(room);
      return; 
    }
    if (room.hasPassword) { setJoinRoomId(room.id); return; }
    socket.emit('joinRoomMeta', { roomId: room.id, user: { id: user.id, username: user.username }, password: '' });
    setSnack('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ...');
    setTimeout(()=>{ window.location.href = `/room/${room.id}`; }, 400);
  };

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
  const handleTelegramAuth = async (room: any) => {
    try {
      const socketUrl = process.env.NEXT_PUBLIC_SOCKET_URL || 'http://localhost:4000';
      const r = await fetch(`${socketUrl}/tg/new-token`);
      const j = await r.json();
      
      if (j.ok) {
        const botUrl = `https://t.me/energy_money_bot?start=login_${j.token}`;
        setSnack('–û—Ç–∫—Ä—ã–≤–∞–µ–º Telegram –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
        window.open(botUrl, '_blank');
        
        // –û–∂–∏–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const t0 = Date.now();
        const iv = setInterval(async () => {
          const p = await fetch(`${socketUrl}/tg/poll?token=${j.token}`);
          const pj = await p.json();
          if (pj?.authorized) {
            clearInterval(iv);
            setSnack('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—Ö–æ–¥–∏–º –≤ –∫–æ–º–Ω–∞—Ç—É...');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const userData = {
              id: pj.user.id,
              username: pj.user.username,
              first_name: pj.user.first_name,
              last_name: pj.user.last_name,
              photo_url: pj.user.photo_url,
              tgId: pj.user.id
            };
            localStorage.setItem('eom_user', JSON.stringify(userData));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            window.location.reload();
          } else if (Date.now() - t0 > 5 * 60 * 1000) {
            clearInterval(iv);
            setSnack('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ');
          }
        }, 2000);
      } else {
        setSnack('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
    } catch (e: any) {
      setSnack('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + (e?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  };

  const doJoinWithPwd = () => {
    socket.emit('joinRoomMeta', { roomId: joinRoomId, user: { id: user?.id, username: user?.username }, password: joinPwd });
    const rid = joinRoomId;
    setJoinRoomId(null); setJoinPwd('');
    setTimeout(()=>{ if (rid) window.location.href = `/room/${rid}`; }, 400);
  };

  return (
    <Box sx={{ p: { xs: 1.5, md: 3 }, maxWidth: 1100, mx: 'auto' }}>
      <GlassCard sx={{ mb: 2 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
          <Box>
            <Typography variant="h5" sx={{ color: '#fff', fontWeight: 800, mb: 1 }}>–ö–æ–º–Ω–∞—Ç—ã</Typography>
            <Typography sx={{ color: 'rgba(255,255,255,0.7)' }}>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π.</Typography>
          </Box>
          {user && (
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Typography sx={{ color: 'rgba(255,255,255,0.8)' }}>
                üë§ {user.username}
              </Typography>
              <GradientButton 
                onClick={() => {
                  if (typeof window !== 'undefined') {
                    localStorage.removeItem('eom_user');
                    window.location.reload();
                  }
                }}
                sx={{ px: 2, py: 1, fontSize: '0.875rem' }}
              >
                –í—ã–π—Ç–∏
              </GradientButton>
            </Box>
          )}
        </Box>
      </GlassCard>

      <GlassCard sx={{ mb: 2 }}>
        <Stack direction={{ xs:'column', md:'row' }} gap={2}>
          <TextField label="–ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç" fullWidth placeholder="–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é, ID –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é..." />
          <GradientButton onClick={()=>setOpenCreate(true)}>+ –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É</GradientButton>
        </Stack>
      </GlassCard>

      <Grid container spacing={2}>
        {rooms.map((r) => (
          <Grid key={r.id} item xs={12} md={6}>
            <GlassCard>
              <Stack direction="row" alignItems="center" justifyContent="space-between">
                <Box>
                  <Typography sx={{ color: '#fff', fontWeight: 700 }}>{r.name}</Typography>
                  <Typography sx={{ color: 'rgba(255,255,255,0.7)', fontSize: 12 }}>–°–æ–∑–¥–∞—Ç–µ–ª—å: {r.creatorUsername || r.creatorId}</Typography>
                  <Stack direction="row" spacing={1} sx={{ mt: 1 }}>
                    <Chip size="small" label={`–ò–≥—Ä–æ–∫–æ–≤: ${r.playersCount}/${r.maxPlayers}`} />
                    {r.hasPassword && <Chip size="small" color="warning" label="–ü–∞—Ä–æ–ª—å" />}
                    <Chip size="small" label={`–¢–∞–π–º–µ—Ä: ${r.timing}—Å`} />
                  </Stack>
                </Box>
                <GradientButton onClick={()=>doJoin(r)}>
                  {user ? '–í–æ–π—Ç–∏' : 'ü§ñ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É'}
                </GradientButton>
              </Stack>
            </GlassCard>
          </Grid>
        ))}
      </Grid>

      {/* Create room dialog */}
      <Dialog open={openCreate} onClose={()=>setOpenCreate(false)} fullWidth maxWidth="md" PaperProps={{ sx: { background: 'linear-gradient(135deg, rgba(15,23,42,0.96), rgba(30,41,59,0.96))', border: '1px solid rgba(255,255,255,0.12)', borderRadius: 3 } }}>
        <DialogTitle sx={{ color: '#fff', fontWeight: 800 }}>–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É</DialogTitle>
        <DialogContent>
          <Grid container spacing={2}>
            <Grid item xs={12} md={6}>
              <Box sx={{ display: 'grid', gap: 1.2 }}>
                <TextField 
                  label="–ù–∞–∑–≤–∞–Ω–∏–µ" 
                  value={createForm.name} 
                  onChange={e=>setCreateForm({...createForm, name: e.target.value})} 
                  placeholder={`–ö–æ–º–Ω–∞—Ç–∞ ${user?.username || '–ò–≥—Ä–æ–∫–∞'}`}
                  fullWidth 
                />
                <TextField label="–ú–∞–∫—Å. –∏–≥—Ä–æ–∫–æ–≤" type="number" value={createForm.maxPlayers} onChange={e=>setCreateForm({...createForm, maxPlayers: Number(e.target.value)})} fullWidth />
                <TextField select label="–í—Ä–µ–º—è —Ö–æ–¥–∞" value={createForm.timing} onChange={e=>setCreateForm({...createForm, timing: Number(e.target.value)})} fullWidth>
                  <MenuItem value={1}>1 –º–∏–Ω—É—Ç–∞</MenuItem>
                  <MenuItem value={2}>2 –º–∏–Ω—É—Ç—ã</MenuItem>
                  <MenuItem value={3}>3 –º–∏–Ω—É—Ç—ã</MenuItem>
                  <MenuItem value={4}>4 –º–∏–Ω—É—Ç—ã</MenuItem>
                  <MenuItem value={5}>5 –º–∏–Ω—É—Ç</MenuItem>
                </TextField>
                <TextField label="–ü–∞—Ä–æ–ª—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" value={createForm.password} onChange={e=>setCreateForm({...createForm, password: e.target.value})} fullWidth />
                <TextField select label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã" value={createForm.gameDurationSec} onChange={e=>setCreateForm({...createForm, gameDurationSec: Number(e.target.value)})} fullWidth>
                  <MenuItem value={1800}>30 –º–∏–Ω—É—Ç</MenuItem>
                  <MenuItem value={3600}>1 —á–∞—Å</MenuItem>
                  <MenuItem value={7200}>2 —á–∞—Å–∞</MenuItem>
                  <MenuItem value={10800}>3 —á–∞—Å–∞</MenuItem>
                  <MenuItem value={14400}>4 —á–∞—Å–∞</MenuItem>
                  <MenuItem value={18000}>5 —á–∞—Å–æ–≤</MenuItem>
                </TextField>
                <TextField select label="–ú–µ—á—Ç–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è (–ë–æ–ª—å—à–æ–π –∫—Ä—É–≥)" value={createForm.dreamId} onChange={e=>setCreateForm({...createForm, dreamId: String(e.target.value)})} fullWidth>
                  {dreams.map(d => (
                    <MenuItem key={d.id} value={d.id}>{d.name} ‚Äî ${d.cost.toLocaleString('en-US')}</MenuItem>
                  ))}
                </TextField>
                <TextField select label="–ü—Ä–æ—Ñ–µ—Å—Å–∏—è" value={createForm.professionId} onChange={e=>setCreateForm({...createForm, professionId: String(e.target.value)})} fullWidth>
                  {PROFESSIONS.map(p => (
                    <MenuItem key={p.id} value={p.id}>{p.name}</MenuItem>
                  ))}
                </TextField>
                <FormControlLabel control={<Checkbox checked={createForm.assignAll} onChange={e=>setCreateForm({...createForm, assignAll: e.target.checked})} />} label="–ù–∞–∑–Ω–∞—á–∏—Ç—å —ç—Ç—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º" />
              </Box>
            </Grid>
            <Grid item xs={12} md={6}>
              {/* –ü—Ä–æ—Ñ–µ—Å—Å–∏—è ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
              <Paper sx={{ p: 2, background: '#fff', borderRadius: 2 }}>
                <Typography variant="h6" sx={{ fontWeight: 800 }}>{prof.name}</Typography>
                <Grid container spacing={1} sx={{ mt: 1 }}>
                  <Grid item xs={6}><Box sx={{ p: 1, bgcolor: '#E6FFF3', borderRadius: 1, textAlign: 'center', fontWeight: 700, color: '#10B981' }}>${prof.salary.toLocaleString('en-US')}<Typography variant="caption" display="block">–ó–∞—Ä–ø–ª–∞—Ç–∞</Typography></Box></Grid>
                  <Grid item xs={6}><Box sx={{ p: 1, bgcolor: '#FFECEC', borderRadius: 1, textAlign: 'center', fontWeight: 700, color: '#EF4444' }}>${prof.totalExpenses.toLocaleString('en-US')}<Typography variant="caption" display="block">–†–∞—Å—Ö–æ–¥—ã</Typography></Box></Grid>
                  <Grid item xs={12}><Box sx={{ p: 1, border: '2px solid #16a34a', borderRadius: 1, textAlign: 'center', fontWeight: 700, color: '#16a34a' }}>${prof.cashFlow.toLocaleString('en-US')}<Typography variant="caption" display="block">–î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫</Typography></Box></Grid>
                </Grid>
                {prof.taxes || prof.otherExpenses ? (
                  <Box sx={{ mt: 1.5, color: '#374151' }}>
                    {prof.taxes ? <Typography variant="body2">–ù–∞–ª–æ–≥–∏: ${prof.taxes.toLocaleString('en-US')}</Typography> : null}
                    {prof.otherExpenses ? <Typography variant="body2">–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ${prof.otherExpenses.toLocaleString('en-US')}</Typography> : null}
                  </Box>
                ) : null}
                {prof.credits?.length ? (
                  <Box sx={{ mt: 1.5 }}>
                    {prof.credits.map((c, i) => (
                      <Typography key={i} variant="body2">{c.name}: ${c.monthly.toLocaleString('en-US')} <span style={{ color: '#6b7280' }}>(${c.principal.toLocaleString('en-US')} —Ç–µ–ª–æ)</span></Typography>
                    ))}
                    <Divider sx={{ my: 1 }} />
                    <Typography variant="body2" sx={{ fontWeight: 700 }}>–ò—Ç–æ–≥–æ —Ç–µ–ª–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: ${prof.creditsTotalPrincipal.toLocaleString('en-US')}</Typography>
                  </Box>
                ) : null}
                <Box sx={{ mt: 1, display: 'flex', gap: 1 }}>
                  <Chip size="small" label="Business" color="success" variant="outlined" />
                  <Chip size="small" label="–°–ª–æ–∂–Ω—ã–π" color="warning" variant="outlined" />
                </Box>
              </Paper>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={()=>setOpenCreate(false)} sx={{ color: '#fff' }}>–û—Ç–º–µ–Ω–∞</Button>
          <GradientButton onClick={doCreate}>–°–æ–∑–¥–∞—Ç—å</GradientButton>
        </DialogActions>
      </Dialog>

      {/* Join with password */}
      <Dialog open={!!joinRoomId} onClose={()=>setJoinRoomId(null)}>
        <DialogTitle>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</DialogTitle>
        <DialogContent>
          <TextField label="–ü–∞—Ä–æ–ª—å" value={joinPwd} onChange={e=>setJoinPwd(e.target.value)} fullWidth />
        </DialogContent>
        <DialogActions>
          <Button onClick={()=>setJoinRoomId(null)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button variant="contained" onClick={doJoinWithPwd}>–í–æ–π—Ç–∏</Button>
        </DialogActions>
      </Dialog>

      <Snackbar open={!!snack} autoHideDuration={2000} onClose={()=>setSnack(null)}>
        <Alert severity="info">{snack}</Alert>
      </Snackbar>
    </Box>
  );
}
