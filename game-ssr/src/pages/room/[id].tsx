import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { useSocket } from '../../contexts/SocketContext';
import { DREAMS } from '../../data/professions';
import FullGameBoard from '../../components/FullGameBoard';
import DebugRoomsPanel from '../../components/DebugRoomsPanel';

const PROFESSIONS = [
  '–í—Ä–∞—á', '–£—á–∏—Ç–µ–ª—å', '–ò–Ω–∂–µ–Ω–µ—Ä', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–î–∏–∑–∞–π–Ω–µ—Ä',
  '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–Æ—Ä–∏—Å—Ç', '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä', '–ü–æ–≤–∞—Ä', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä',
  '–ü—Å–∏—Ö–æ–ª–æ–≥', '–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç', '–§–æ—Ç–æ–≥—Ä–∞—Ñ', '–ú—É–∑—ã–∫–∞–Ω—Ç', '–•—É–¥–æ–∂–Ω–∏–∫'
];

interface Room {
  id: string;
  name: string;
  maxPlayers: number;
  currentPlayers: number;
  turnTime: number;
  status: 'waiting' | 'playing' | 'finished';
  players: Array<{
    id: string;
    name: string;
    email: string;
    isReady: boolean;
    profession?: string;
    dream?: string;
    position?: number;
    money?: number;
  }>;
}

export default function RoomPage() {
  const router = useRouter();
  const { id } = router.query;
  const { socket, isConnected } = useSocket();
  const [room, setRoom] = useState<Room | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedDream, setSelectedDream] = useState<string | null>(null);
  const [selectedProfession, setSelectedProfession] = useState<string | null>(null);
  const [currentPlayer, setCurrentPlayer] = useState<any>(null);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [showGameBoard, setShowGameBoard] = useState(false);
  const [myPlayer, setMyPlayer] = useState<any>(null);
  const [isHost, setIsHost] = useState(false);

  useEffect(() => {
    if (!id) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = localStorage.getItem('user');
    if (!user) {
      router.push('/simple-auth');
      return;
    }
  }, [id, router]);

  useEffect(() => {
    if (!socket || !isConnected || !id) return;

    console.log('üîå Socket –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', id);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = localStorage.getItem('user');
    const userData = user ? JSON.parse(user) : { name: '–ò–≥—Ä–æ–∫', email: 'player@example.com' };
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.emit('join-room', { 
      roomId: id, 
      playerName: userData.name || '–ò–≥—Ä–æ–∫',
      playerEmail: userData.email || 'player@example.com'
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const handleRoomJoined = (roomData: Room) => {
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ:', roomData);
      setRoom(roomData);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞
      const user = localStorage.getItem('user');
      const userData = user ? JSON.parse(user) : { name: '–ò–≥—Ä–æ–∫', email: 'player@example.com' };
      const myPlayerData = roomData.players.find(p => 
        p.email === userData.email || p.name === userData.name
      );
      setMyPlayer(myPlayerData);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —Ö–æ—Å—Ç–æ–º (–ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –≤ –∫–æ–º–Ω–∞—Ç–µ)
      setIsHost(myPlayerData && roomData.players.length > 0 && roomData.players[0].id === myPlayerData.id);
      
      setLoading(false);
    };

    const handleRoomUpdated = (roomData: Room) => {
      console.log('üìã –ö–æ–º–Ω–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', roomData);
      setRoom(roomData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞
      const user = localStorage.getItem('user');
      const userData = user ? JSON.parse(user) : { name: '–ò–≥—Ä–æ–∫', email: 'player@example.com' };
      const myPlayerData = roomData.players.find(p => 
        p.email === userData.email || p.name === userData.name
      );
      setMyPlayer(myPlayerData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ö–æ—Å—Ç–∞
      setIsHost(myPlayerData && roomData.players.length > 0 && roomData.players[0].id === myPlayerData.id);
    };

    const handleError = (error: any) => {
      console.error('‚ùå Socket error:', error);
      const errorMessage = typeof error === 'string' ? error : error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      setLoading(false);
    };

    const handleJoinRoomError = (error: any) => {
      console.error('‚ùå Join room error:', error);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ: ${error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      setLoading(false);
    };

    const handlePlayerJoined = (data: any) => {
      console.log('üë§ –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:', data);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
      if (data.players) {
        setRoom(prev => prev ? {
          ...prev,
          players: data.players,
          currentPlayers: data.players.length
        } : null);
      }
    };

    const handlePlayerLeft = (data: any) => {
      console.log('üëã –ò–≥—Ä–æ–∫ –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É:', data);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
      if (data.players) {
        setRoom(prev => prev ? {
          ...prev,
          players: data.players,
          currentPlayers: data.players.length
        } : null);
      }
    };

    const handlePlayerReadyUpdated = (data: any) => {
      console.log('‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
      if (data.players) {
        setRoom(prev => prev ? {
          ...prev,
          players: data.players
        } : null);
      }
    };

    const handleGameStarted = (data: any) => {
      console.log('üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å:', data);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã
      setRoom(prev => prev ? {
        ...prev,
        started: true,
        status: 'playing',
        players: data.players,
        order: data.order,
        currentPlayer: data.currentPlayer,
        turnEndAt: data.turnEndAt,
        gameEndAt: data.gameEndAt
      } : null);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å–∫—É
      setCurrentPlayer(data.currentPlayer);
      setCurrentIndex(data.currentIndex || 0);
      setShowGameBoard(true);
    };

    const handleDiceRolled = (data: any) => {
      console.log('üé≤ –ö—É–±–∏–∫ –±—Ä–æ—à–µ–Ω:', data);
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
      setRoom(prev => prev ? {
        ...prev,
        players: prev.players.map(p => 
          p.name === data.player 
            ? { ...p, position: data.newPosition }
            : p
        )
      } : null);
    };

    const handleTurnChanged = (data: any) => {
      console.log('üîÑ –•–æ–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è:', data);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
      setRoom(prev => prev ? {
        ...prev,
        currentPlayer: data.currentPlayer,
        currentIndex: data.currentIndex,
        turnEndAt: data.turnEndAt
      } : null);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏
      setCurrentPlayer(data.currentPlayer);
      setCurrentIndex(data.currentIndex);
    };

    const handleCardBought = (data: any) => {
      console.log('üí≥ –ö–∞—Ä—Ç–∞ –∫—É–ø–ª–µ–Ω–∞:', data);
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫–∞
      setRoom(prev => prev ? {
        ...prev,
        players: prev.players.map(p => 
          p.name === data.player 
            ? { ...p, money: data.newMoney }
            : p
        )
      } : null);
    };


    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    socket.on('room-joined', handleRoomJoined);
    socket.on('room-updated', handleRoomUpdated);
    socket.on('player-joined', handlePlayerJoined);
    socket.on('player-left', handlePlayerLeft);
    socket.on('player-ready-updated', handlePlayerReadyUpdated);
    socket.on('game-started', handleGameStarted);
    socket.on('dice-rolled', handleDiceRolled);
    socket.on('turn-changed', handleTurnChanged);
    socket.on('card-bought', handleCardBought);
    socket.on('join-room-error', handleJoinRoomError);
    socket.on('error', handleError);

    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      socket.off('room-joined', handleRoomJoined);
      socket.off('room-updated', handleRoomUpdated);
      socket.off('player-joined', handlePlayerJoined);
      socket.off('player-left', handlePlayerLeft);
      socket.off('player-ready-updated', handlePlayerReadyUpdated);
      socket.off('game-started', handleGameStarted);
      socket.off('dice-rolled', handleDiceRolled);
      socket.off('turn-changed', handleTurnChanged);
      socket.off('card-bought', handleCardBought);
      socket.off('join-room-error', handleJoinRoomError);
      socket.off('error', handleError);
    };
  }, [socket, isConnected, id]);

  const handleLeaveRoom = () => {
    if (socket && id) {
      socket.emit('leave-room', { roomId: id });
    }
    router.push('/simple-rooms');
  };

  const handleProfessionSelect = (profession: string) => {
    setSelectedProfession(profession);
    if (socket && room && id) {
      socket.emit('player-setup', { 
        roomId: id, 
        profession: profession,
        dream: selectedDream 
      });
    }
  };

  const handleReady = () => {
    if (socket && room && id && selectedDream && selectedProfession) {
      socket.emit('player-ready', { 
        roomId: id, 
        dream: selectedDream,
        profession: selectedProfession 
      });
    }
  };

  const handleSetupCharacter = () => {
    router.push(`/room/setup?id=${id}`);
  };

  const handleStartGame = () => {
    if (socket && room && id) {
      socket.emit('start-game', { roomId: id });
    }
  };

  const handleRollDice = () => {
    if (socket && room && id) {
      socket.emit('roll-dice', { roomId: id });
    }
  };

  const handleBuyCard = (cardId: string, price: number) => {
    if (socket && room && id) {
      socket.emit('buy-card', { roomId: id, cardId, price });
    }
  };

  const handleGetGameState = () => {
    if (socket && room && id) {
      socket.emit('get-game-state', { roomId: id });
    }
  };


  if (loading) {
    return (
      <div style={{
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        fontFamily: 'Arial, sans-serif'
      }}>
        <div style={{
          background: 'rgba(0, 0, 0, 0.8)',
          backdropFilter: 'blur(15px)',
          borderRadius: '20px',
          padding: '40px',
          textAlign: 'center',
          border: '2px solid rgba(255, 255, 255, 0.3)',
          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.5)'
        }}>
          <div style={{
            color: 'white',
            fontSize: '1.5rem',
            marginBottom: '20px'
          }}>
            {isConnected ? 'üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç—ã...' : 'üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...'}
          </div>
          <div style={{
            color: 'rgba(255, 255, 255, 0.7)',
            fontSize: '1rem'
          }}>
            {isConnected ? '–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ' : '–û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div style={{
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        fontFamily: 'Arial, sans-serif'
      }}>
        <div style={{
          background: 'rgba(0, 0, 0, 0.8)',
          backdropFilter: 'blur(15px)',
          borderRadius: '20px',
          padding: '40px',
          textAlign: 'center',
          border: '2px solid rgba(255, 0, 0, 0.3)',
          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.5)'
        }}>
          <div style={{
            color: '#ff6b6b',
            fontSize: '1.5rem',
            marginBottom: '20px'
          }}>
            ‚ùå –û—à–∏–±–∫–∞
          </div>
          <div style={{
            color: 'white',
            fontSize: '1rem',
            marginBottom: '30px'
          }}>
            {error}
          </div>
          <button
            onClick={() => router.push('/simple-rooms')}
            style={{
              background: 'linear-gradient(45deg, #667eea, #764ba2)',
              color: 'white',
              border: 'none',
              borderRadius: '10px',
              padding: '15px 30px',
              fontSize: '16px',
              fontWeight: 'bold',
              cursor: 'pointer'
            }}
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–æ–±–±–∏
          </button>
        </div>
      </div>
    );
  }

  if (!room) {
    return (
      <div style={{
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        fontFamily: 'Arial, sans-serif'
      }}>
        <div style={{
          background: 'rgba(0, 0, 0, 0.8)',
          backdropFilter: 'blur(15px)',
          borderRadius: '20px',
          padding: '40px',
          textAlign: 'center',
          border: '2px solid rgba(255, 255, 255, 0.3)',
          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.5)'
        }}>
          <div style={{
            color: 'white',
            fontSize: '1.5rem',
            marginBottom: '20px'
          }}>
            üè† –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
          </div>
          <div style={{
            color: 'rgba(255, 255, 255, 0.7)',
            fontSize: '1rem',
            marginBottom: '30px'
          }}>
            –ö–æ–º–Ω–∞—Ç–∞ —Å ID "{id}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
          </div>
          <button
            onClick={() => router.push('/simple-rooms')}
            style={{
              background: 'linear-gradient(45deg, #667eea, #764ba2)',
              color: 'white',
              border: 'none',
              borderRadius: '10px',
              padding: '15px 30px',
              fontSize: '16px',
              fontWeight: 'bold',
              cursor: 'pointer'
            }}
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–æ–±–±–∏
          </button>
        </div>
      </div>
    );
  }

  return (
    <div style={{
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%)',
      padding: '20px',
      fontFamily: 'Arial, sans-serif'
    }}>
      <div style={{
        maxWidth: '1200px',
        margin: '0 auto'
      }}>
        {/* Header */}
        <div style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          marginBottom: '30px',
          background: 'rgba(0, 0, 0, 0.8)',
          backdropFilter: 'blur(15px)',
          borderRadius: '15px',
          padding: '20px',
          border: '2px solid rgba(255, 255, 255, 0.3)',
          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.5)'
        }}>
          <div>
            <h1 style={{
              color: 'white',
              margin: 0,
              fontSize: '2rem',
              fontWeight: 'bold'
            }}>
              {room.name}
            </h1>
            <div style={{
              color: 'rgba(255, 255, 255, 0.7)',
              fontSize: '1rem',
              marginTop: '5px'
            }}>
              –ò–≥—Ä–æ–∫–æ–≤: {room.currentPlayers}/{room.maxPlayers} ‚Ä¢ 
              –í—Ä–µ–º—è —Ö–æ–¥–∞: {room.turnTime / 60} –º–∏–Ω ‚Ä¢ 
              –°—Ç–∞—Ç—É—Å: {room.status}
            </div>
            <div style={{
              color: isConnected ? '#4CAF50' : '#f44336',
              fontSize: '0.9rem',
              marginTop: '5px'
            }}>
              {isConnected ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ'}
            </div>
          </div>
          <div>
            <button
              onClick={handleSetupCharacter}
              style={{
                background: 'linear-gradient(45deg, #ff6b6b, #ee5a24)',
                color: 'white',
                border: 'none',
                borderRadius: '8px',
                padding: '12px 24px',
                marginRight: '10px',
                cursor: 'pointer',
                fontWeight: 'bold',
                fontSize: '16px',
                boxShadow: '0 4px 15px rgba(255, 107, 107, 0.4)',
                transition: 'all 0.3s ease'
              }}
            >
              –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            </button>
            <button
              onClick={handleLeaveRoom}
              style={{
                background: 'rgba(255, 255, 255, 0.2)',
                color: 'white',
                border: '2px solid rgba(255, 255, 255, 0.5)',
                borderRadius: '8px',
                padding: '12px 24px',
                cursor: 'pointer',
                fontSize: '16px',
                fontWeight: 'bold',
                transition: 'all 0.3s ease'
              }}
            >
              –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
            </button>
          </div>
        </div>

        {/* Players List */}
        <div style={{
          background: 'rgba(255, 255, 255, 0.1)',
          backdropFilter: 'blur(10px)',
          borderRadius: '15px',
          padding: '30px',
          marginBottom: '30px',
          border: '1px solid rgba(255, 255, 255, 0.2)'
        }}>
          <h2 style={{ color: 'white', marginTop: 0, marginBottom: '20px' }}>
            –ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ ({room.players.length})
          </h2>

          {room.players.length === 0 ? (
            <div style={{
              textAlign: 'center',
              color: 'rgba(255, 255, 255, 0.7)',
              padding: '40px'
            }}>
              –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
            </div>
          ) : (
            <div style={{ display: 'grid', gap: '15px' }}>
              {room.players.map((player, index) => (
                <div
                  key={player.id}
                  style={{
                    background: 'rgba(255, 255, 255, 0.1)',
                    borderRadius: '10px',
                    padding: '20px',
                    border: '1px solid rgba(255, 255, 255, 0.2)',
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center'
                  }}
                >
                  <div>
                    <h3 style={{ color: 'white', margin: '0 0 10px 0' }}>
                      {player.name}
                    </h3>
                    <div style={{ color: 'rgba(255, 255, 255, 0.7)', fontSize: '14px' }}>
                      Email: {player.email}
                    </div>
                    {/* –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –º–µ—á—Ç—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞ */}
                    {!player.isReady && myPlayer && myPlayer.id === player.id && (
                      <div style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '20px',
                        marginTop: '8px',
                        flexWrap: 'wrap'
                      }}>
                        {/* –ü—Ä–æ—Ñ–µ—Å—Å–∏—è */}
                        <div style={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: '8px'
                        }}>
                          <span style={{
                            color: 'rgba(255, 255, 255, 0.7)',
                            fontSize: '12px'
                          }}>
                            üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è:
                          </span>
                          {player.profession ? (
                            <span style={{
                              color: 'white',
                              fontSize: '12px',
                              fontWeight: 'bold',
                              padding: '4px 8px',
                              background: 'rgba(76, 175, 80, 0.2)',
                              borderRadius: '4px',
                              border: '1px solid rgba(76, 175, 80, 0.5)'
                            }}>
                              {player.profession}
                            </span>
                          ) : (
                            <select
                              value={selectedProfession || ''}
                              onChange={(e) => handleProfessionSelect(e.target.value)}
                              style={{
                                padding: '4px 8px',
                                borderRadius: '4px',
                                background: 'rgba(255, 255, 255, 0.1)',
                                color: 'white',
                                border: '1px solid rgba(255, 255, 255, 0.3)',
                                fontSize: '12px',
                                minWidth: '120px'
                              }}
                            >
                              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é</option>
                              {PROFESSIONS.map(profession => (
                                <option key={profession} value={profession} style={{ background: '#1a1a2e', color: 'white' }}>
                                  {profession}
                                </option>
                              ))}
                            </select>
                          )}
                        </div>
                        
                        {/* –ú–µ—á—Ç–∞ */}
                        <div style={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: '8px'
                        }}>
                          <span style={{
                            color: 'rgba(255, 255, 255, 0.7)',
                            fontSize: '12px'
                          }}>
                            üéØ –ú–µ—á—Ç–∞:
                          </span>
                          {player.dream ? (
                            <span style={{
                              color: 'white',
                              fontSize: '12px',
                              fontWeight: 'bold',
                              padding: '4px 8px',
                              background: 'rgba(76, 175, 80, 0.2)',
                              borderRadius: '4px',
                              border: '1px solid rgba(76, 175, 80, 0.5)'
                            }}>
                              {player.dream}
                            </span>
                          ) : (
                            <select
                              value={selectedDream || ''}
                              onChange={(e) => setSelectedDream(e.target.value)}
                              style={{
                                padding: '4px 8px',
                                borderRadius: '4px',
                                background: 'rgba(255, 255, 255, 0.1)',
                                color: 'white',
                                border: '1px solid rgba(255, 255, 255, 0.3)',
                                fontSize: '12px',
                                minWidth: '150px'
                              }}
                            >
                              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—á—Ç—É</option>
                              {DREAMS.map(dream => (
                                <option key={dream.id} value={dream.id} style={{ background: '#1a1a2e', color: 'white' }}>
                                  {dream.icon} {dream.name}
                                </option>
                              ))}
                            </select>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                  <div style={{
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'flex-end',
                    gap: '10px'
                  }}>
                    
                    <div style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '10px'
                    }}>
                      <div style={{
                        color: player.isReady ? '#4CAF50' : '#ff9800',
                        fontSize: '14px',
                        fontWeight: 'bold'
                      }}>
                        {player.isReady ? '‚úÖ –ì–æ—Ç–æ–≤' : '‚è≥ –û–∂–∏–¥–∞–µ—Ç'}
                      </div>
                      {/* –ö–Ω–æ–ø–∫–∞ –ì–æ—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞ */}
                      {myPlayer && myPlayer.id === player.id && (
                        <button
                          onClick={handleReady}
                          disabled={player.isReady || !isConnected || !selectedDream || !selectedProfession}
                          style={{
                            padding: '8px 16px',
                            border: 'none',
                            borderRadius: '6px',
                            background: (player.isReady || !isConnected || !selectedDream || !selectedProfession)
                              ? 'rgba(255, 255, 255, 0.1)'
                              : 'linear-gradient(45deg, #667eea, #764ba2)',
                            color: 'white',
                            cursor: (player.isReady || !isConnected || !selectedDream || !selectedProfession) ? 'not-allowed' : 'pointer',
                            opacity: (player.isReady || !isConnected || !selectedDream || !selectedProfession) ? 0.5 : 1,
                            fontSize: '14px'
                          }}
                        >
                          {player.isReady ? '–ì–æ—Ç–æ–≤' : '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å'}
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Game Status */}
        <div style={{
          background: 'rgba(255, 255, 255, 0.1)',
          backdropFilter: 'blur(10px)',
          borderRadius: '15px',
          padding: '30px',
          border: '1px solid rgba(255, 255, 255, 0.2)',
          textAlign: 'center'
        }}>
          <h2 style={{ color: 'white', marginTop: 0, marginBottom: '20px' }}>
            –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
          </h2>
          
          {room.status === 'waiting' && (
            <div style={{
              color: 'rgba(255, 255, 255, 0.7)',
              fontSize: '1.1rem',
              marginBottom: '20px'
            }}>
              {room.currentPlayers < 2 
                ? `–û–∂–∏–¥–∞–µ–º –µ—â–µ ${2 - room.currentPlayers} –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞`
                : room.players.filter(p => p.isReady).length < 2
                  ? `–ì–æ—Ç–æ–≤–æ: ${room.players.filter(p => p.isReady).length}/${room.currentPlayers} –∏–≥—Ä–æ–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 2)`
                  : room.players.filter(p => !p.isReady).length === 0
                    ? '–í—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã! –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É'
                    : `–ì–æ—Ç–æ–≤–æ: ${room.players.filter(p => p.isReady).length}/${room.currentPlayers} –∏–≥—Ä–æ–∫–æ–≤ (–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å)`
              }
            </div>
          )}

          {room.status === 'waiting' && room.currentPlayers >= 2 && room.players.filter(p => p.isReady).length >= 2 && isHost && (
            <div style={{ marginBottom: '20px' }}>
              <button
                onClick={handleStartGame}
                style={{
                  padding: '15px 30px',
                  background: 'linear-gradient(45deg, #4CAF50, #45a049)',
                  color: 'white',
                  border: 'none',
                  borderRadius: '10px',
                  fontSize: '16px',
                  fontWeight: 'bold',
                  cursor: 'pointer',
                  boxShadow: '0 4px 15px rgba(76, 175, 80, 0.4)',
                  transition: 'all 0.3s ease'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = 'translateY(-2px)';
                  e.currentTarget.style.boxShadow = '0 6px 20px rgba(76, 175, 80, 0.6)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = 'translateY(0)';
                  e.currentTarget.style.boxShadow = '0 4px 15px rgba(76, 175, 80, 0.4)';
                }}
              >
                üöÄ –°—Ç–∞—Ä—Ç ({room.players.filter(p => p.isReady).length}/{room.currentPlayers} –≥–æ—Ç–æ–≤—ã)
              </button>
            </div>
          )}

          {selectedDream && (
            <div style={{ 
              color: '#4CAF50', 
              fontSize: '14px', 
              marginBottom: '15px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: '8px'
            }}>
              üéØ –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–µ—á—Ç–∞: {selectedDream ? (DREAMS.find(d => d.id === selectedDream)?.name || selectedDream) : ''}
            </div>
          )}

          {room.status === 'playing' && showGameBoard && (
            <FullGameBoard
              players={room.players}
              currentPlayer={currentPlayer}
              currentIndex={currentIndex}
              onRollDice={handleRollDice}
              onBuyCard={handleBuyCard}
              onGetGameState={handleGetGameState}
              isMyTurn={currentPlayer?.socketId === socket?.id}
            />
          )}

          {room.status === 'playing' && !showGameBoard && (
            <div style={{
              color: '#4CAF50',
              fontSize: '1.1rem',
              marginBottom: '20px',
              textAlign: 'center'
            }}>
              üéÆ –ò–≥—Ä–∞ –∏–¥–µ—Ç! –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–≤—É—é –¥–æ—Å–∫—É...
            </div>
          )}

          {room.status === 'finished' && (
            <div style={{
              color: '#ff9800',
              fontSize: '1.1rem',
              marginBottom: '20px'
            }}>
              üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            </div>
          )}

          {!isConnected && (
            <div style={{
              color: '#f44336',
              fontSize: '1rem',
              marginBottom: '20px'
            }}>
              ‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
            </div>
          )}
        </div>

        {/* –î–µ–±–∞–≥-–ø–∞–Ω–µ–ª—å —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏ */}
        <DebugRoomsPanel currentRoomId={id as string} />

      </div>
    </div>
  );
}