import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { io, Socket } from 'socket.io-client';

interface Player {
  id: string;
  name: string;
  email: string;
  socketId: string;
  isReady: boolean;
  profession: string;
  dream: string;
  selectedProfession: string;
  professionConfirmed: boolean;
  joinedAt: string;
  money: number;
  position: number;
  cards: any[];
  isActive: boolean;
}

interface Room {
  id: string;
  name: string;
  creator: string;
  maxPlayers: number;
  players: Player[];
  started: boolean;
  professionSelectionMode: string;
  availableProfessions: string[];
  timing: number;
  createdAt: string;
}

const PROFESSIONS = [
  '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å', '–ò–Ω–≤–µ—Å—Ç–æ—Ä', '–§–∏–Ω–∞–Ω—Å–∏—Å—Ç', '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', 
  '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–ê–Ω–∞–ª–∏—Ç–∏–∫', '–¢—Ä–µ–π–¥–µ—Ä', '–ë–∞–Ω–∫–∏—Ä'
];

const DREAMS = [
  '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å', '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
  '–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥', '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫–∞—Ä—å–µ—Ä–∞', '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä',
  '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ä—Ç–∞–ø'
];

export default function AdvancedRoom() {
  const [socket, setSocket] = useState<Socket | null>(null);
  const [room, setRoom] = useState<Room | null>(null);
  const [loading, setLoading] = useState(true);
  const [message, setMessage] = useState('');
  const [userData, setUserData] = useState<any>(null);
  const [selectedProfession, setSelectedProfession] = useState('');
  const [selectedDream, setSelectedDream] = useState('');
  const [showProfessionModal, setShowProfessionModal] = useState(false);
  const [showDreamModal, setShowDreamModal] = useState(false);
  const router = useRouter();
  const { id } = router.query;

  useEffect(() => {
    if (!id) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = localStorage.getItem('user');
    if (!user) {
      router.push('/simple-auth');
      return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const userData = JSON.parse(user);
      setUserData(userData);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Socket.IO
    const socketUrl = process.env.NEXT_PUBLIC_SOCKET_URL || 'https://energy888-advanced-socket.onrender.com';
    console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Advanced Socket.IO:', socketUrl);
    
    const newSocket = io(socketUrl, {
      transports: ['websocket', 'polling']
    });

    newSocket.on('connect', () => {
      console.log('üîå Socket connected:', newSocket.connected);
      setSocket(newSocket);
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
      newSocket.emit('get-room-info', { roomId: id });
    });

    newSocket.on('disconnect', () => {
      console.log('üîå Socket disconnected');
      setSocket(null);
    });

    newSocket.on('room-info', (roomData: Room) => {
      console.log('üè† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ:', roomData);
      setRoom(roomData);
      setLoading(false);
      
      // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
      const currentPlayer = roomData.players.find(p => p.socketId === newSocket.id);
      if (currentPlayer) {
        setSelectedProfession(currentPlayer.profession || '');
        setSelectedDream(currentPlayer.dream || '');
      }
    });

    newSocket.on('room-info-error', (error: any) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ:', error);
      setMessage(`–û—à–∏–±–∫–∞: ${error.error}`);
      setLoading(false);
    });

    newSocket.on('player-joined', (data: { player: Player; players: Player[] }) => {
      console.log('üë§ –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:', data.player.name);
      setRoom(prev => prev ? { ...prev, players: data.players } : null);
    });

    newSocket.on('player-left', (data: { player: Player; players: Player[] }) => {
      console.log('üëã –ò–≥—Ä–æ–∫ –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É:', data.player.name);
      setRoom(prev => prev ? { ...prev, players: data.players } : null);
    });

    newSocket.on('player-updated', (data: { player: Player; players: Player[] }) => {
      console.log('‚öôÔ∏è –ò–≥—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:', data.player.name);
      setRoom(prev => prev ? { ...prev, players: data.players } : null);
    });

    newSocket.on('player-ready-updated', (data: { player: Player; players: Player[] }) => {
      console.log('‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data.player.name);
      setRoom(prev => prev ? { ...prev, players: data.players } : null);
    });

    newSocket.on('game-started', (data: any) => {
      console.log('üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!');
      setRoom(prev => prev ? { ...prev, started: true } : null);
      setMessage('üéâ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£–¥–∞—á–∏!');
    });

    newSocket.on('join-room-error', (error: any) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
      setMessage(`–û—à–∏–±–∫–∞: ${error.error}`);
    });

    newSocket.on('setup-error', (error: any) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä–æ–∫–∞:', error);
      setMessage(`–û—à–∏–±–∫–∞: ${error.error}`);
    });

    newSocket.on('error', (error: any) => {
      console.error('‚ùå Socket error:', error);
      setMessage(`–û—à–∏–±–∫–∞: ${error.message}`);
    });

    return () => {
      newSocket.close();
    };
  }, [id, router]);

  const handleProfessionSelect = (profession: string) => {
    if (!socket || !room) return;

    setSelectedProfession(profession);
    setShowProfessionModal(false);

    socket.emit('player-setup', {
      roomId: room.id,
      profession: profession,
      dream: selectedDream
    });
  };

  const handleDreamSelect = (dream: string) => {
    if (!socket || !room) return;

    setSelectedDream(dream);
    setShowDreamModal(false);

    socket.emit('player-setup', {
      roomId: room.id,
      profession: selectedProfession,
      dream: dream
    });
  };

  const handleReadyToggle = () => {
    if (!socket || !room) return;

    socket.emit('player-ready', { roomId: room.id });
  };

  const handleLeaveRoom = () => {
    if (!socket || !room) return;

    socket.emit('leave-room', { roomId: room.id });
    router.push('/advanced-rooms');
  };

  if (loading) {
    return (
      <div style={{
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        fontFamily: 'Arial, sans-serif'
      }}>
        <div style={{
          background: 'rgba(255, 255, 255, 0.95)',
          borderRadius: '20px',
          padding: '40px',
          textAlign: 'center',
          boxShadow: '0 20px 40px rgba(0,0,0,0.1)'
        }}>
          <div style={{ fontSize: '3rem', marginBottom: '20px' }}>‚è≥</div>
          <h2 style={{ color: '#2d3748', marginBottom: '10px' }}>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç—ã...</h2>
          <p style={{ color: '#718096' }}>–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É...</p>
        </div>
      </div>
    );
  }

  if (!room) {
    return (
      <div style={{
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        fontFamily: 'Arial, sans-serif'
      }}>
        <div style={{
          background: 'rgba(255, 255, 255, 0.95)',
          borderRadius: '20px',
          padding: '40px',
          textAlign: 'center',
          boxShadow: '0 20px 40px rgba(0,0,0,0.1)'
        }}>
          <div style={{ fontSize: '3rem', marginBottom: '20px' }}>‚ùå</div>
          <h2 style={{ color: '#2d3748', marginBottom: '10px' }}>–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h2>
          <p style={{ color: '#718096', marginBottom: '20px' }}>–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞</p>
          <button
            onClick={() => router.push('/advanced-rooms')}
            style={{
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              color: 'white',
              border: 'none',
              padding: '12px 24px',
              borderRadius: '25px',
              fontSize: '1rem',
              fontWeight: 'bold',
              cursor: 'pointer'
            }}
          >
            üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç
          </button>
        </div>
      </div>
    );
  }

  const currentPlayer = room.players.find(p => p.socketId === socket?.id);
  const allReady = room.players.length >= 2 && room.players.every(p => p.isReady);

  return (
    <div style={{ 
      minHeight: '100vh', 
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      padding: '20px',
      fontFamily: 'Arial, sans-serif'
    }}>
      <div style={{
        maxWidth: '1200px',
        margin: '0 auto',
        background: 'rgba(255, 255, 255, 0.95)',
        borderRadius: '20px',
        padding: '30px',
        boxShadow: '0 20px 40px rgba(0,0,0,0.1)'
      }}>
        {/* Header */}
        <div style={{ textAlign: 'center', marginBottom: '30px' }}>
          <h1 style={{ 
            color: '#2d3748', 
            fontSize: '2.5rem', 
            marginBottom: '10px',
            fontWeight: 'bold'
          }}>
            üè† {room.name}
          </h1>
          <p style={{ color: '#718096', fontSize: '1.1rem' }}>
            –°–æ–∑–¥–∞—Ç–µ–ª—å: {room.creator} ‚Ä¢ –ò–≥—Ä–æ–∫–æ–≤: {room.players.length}/{room.maxPlayers}
          </p>
        </div>

        {/* Message */}
        {message && (
          <div style={{
            background: message.includes('–û—à–∏–±–∫–∞') ? '#fed7d7' : '#c6f6d5',
            color: message.includes('–û—à–∏–±–∫–∞') ? '#c53030' : '#2f855a',
            padding: '15px',
            borderRadius: '10px',
            marginBottom: '20px',
            textAlign: 'center',
            fontWeight: 'bold'
          }}>
            {message}
          </div>
        )}

        {/* Game Status */}
        {room.started ? (
          <div style={{
            background: '#c6f6d5',
            color: '#2f855a',
            padding: '20px',
            borderRadius: '15px',
            textAlign: 'center',
            marginBottom: '30px',
            fontWeight: 'bold',
            fontSize: '1.2rem'
          }}>
            üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£–¥–∞—á–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º!
          </div>
        ) : (
          <div style={{
            background: '#bee3f8',
            color: '#2b6cb0',
            padding: '20px',
            borderRadius: '15px',
            textAlign: 'center',
            marginBottom: '30px',
            fontWeight: 'bold',
            fontSize: '1.2rem'
          }}>
            ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤... {allReady ? '–í—Å–µ –≥–æ—Ç–æ–≤—ã!' : '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤"'}
          </div>
        )}

        {/* Players List */}
        <div style={{ marginBottom: '30px' }}>
          <h2 style={{ 
            color: '#2d3748', 
            marginBottom: '20px', 
            fontSize: '1.8rem',
            textAlign: 'center'
          }}>
            üë• –ò–≥—Ä–æ–∫–∏ ({room.players.length})
          </h2>
          
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))',
            gap: '20px'
          }}>
            {room.players.map(player => (
              <div
                key={player.id}
                style={{
                  background: player.socketId === socket?.id ? '#e6fffa' : 'white',
                  borderRadius: '15px',
                  padding: '20px',
                  border: player.socketId === socket?.id ? '3px solid #38b2ac' : '2px solid #e2e8f0',
                  boxShadow: '0 4px 15px rgba(0,0,0,0.1)',
                  position: 'relative'
                }}
              >
                {player.socketId === socket?.id && (
                  <div style={{
                    position: 'absolute',
                    top: '-10px',
                    right: '-10px',
                    background: '#38b2ac',
                    color: 'white',
                    padding: '5px 10px',
                    borderRadius: '15px',
                    fontSize: '0.8rem',
                    fontWeight: 'bold'
                  }}>
                    –í–´
                  </div>
                )}
                
                <h3 style={{ 
                  color: '#2d3748', 
                  marginBottom: '15px',
                  fontSize: '1.3rem',
                  fontWeight: 'bold'
                }}>
                  {player.name}
                </h3>
                
                <div style={{ marginBottom: '15px' }}>
                  <p style={{ color: '#4a5568', margin: '5px 0' }}>
                    üé≠ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {player.profession || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}
                  </p>
                  <p style={{ color: '#4a5568', margin: '5px 0' }}>
                    üåü –ú–µ—á—Ç–∞: {player.dream || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}
                  </p>
                  <p style={{ color: '#4a5568', margin: '5px 0' }}>
                    üí∞ –î–µ–Ω—å–≥–∏: {player.money}
                  </p>
                  <p style={{ color: '#4a5568', margin: '5px 0' }}>
                    üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {new Date(player.joinedAt).toLocaleString()}
                  </p>
                </div>
                
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'space-between'
                }}>
                  <div style={{
                    background: player.isReady ? '#c6f6d5' : '#fed7d7',
                    color: player.isReady ? '#2f855a' : '#c53030',
                    padding: '8px 12px',
                    borderRadius: '20px',
                    fontSize: '0.9rem',
                    fontWeight: 'bold'
                  }}>
                    {player.isReady ? '‚úÖ –ì–æ—Ç–æ–≤' : '‚è≥ –ù–µ –≥–æ—Ç–æ–≤'}
                  </div>
                  
                  {player.socketId === socket?.id && (
                    <button
                      onClick={handleReadyToggle}
                      style={{
                        background: player.isReady 
                          ? 'linear-gradient(135deg, #f56565 0%, #e53e3e 100%)' 
                          : 'linear-gradient(135deg, #48bb78 0%, #38a169 100%)',
                        color: 'white',
                        border: 'none',
                        padding: '8px 16px',
                        borderRadius: '20px',
                        fontSize: '0.9rem',
                        fontWeight: 'bold',
                        cursor: 'pointer'
                      }}
                    >
                      {player.isReady ? '‚ùå –ù–µ –≥–æ—Ç–æ–≤' : '‚úÖ –ì–æ—Ç–æ–≤'}
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Player Setup */}
        {currentPlayer && !room.started && (
          <div style={{
            background: '#f7fafc',
            borderRadius: '15px',
            padding: '25px',
            marginBottom: '30px',
            border: '2px solid #e2e8f0'
          }}>
            <h3 style={{ color: '#2d3748', marginBottom: '20px', fontSize: '1.3rem' }}>
              ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            </h3>
            
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px' }}>
              {/* Profession Selection */}
              <div>
                <label style={{ 
                  display: 'block', 
                  marginBottom: '10px', 
                  fontWeight: 'bold',
                  color: '#4a5568'
                }}>
                  üé≠ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è:
                </label>
                <div style={{
                  background: 'white',
                  borderRadius: '10px',
                  padding: '15px',
                  border: '2px solid #e2e8f0',
                  cursor: 'pointer',
                  textAlign: 'center',
                  fontWeight: 'bold',
                  color: selectedProfession ? '#2d3748' : '#a0aec0'
                }}
                onClick={() => setShowProfessionModal(true)}
                >
                  {selectedProfession || '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é...'}
                </div>
              </div>

              {/* Dream Selection */}
              <div>
                <label style={{ 
                  display: 'block', 
                  marginBottom: '10px', 
                  fontWeight: 'bold',
                  color: '#4a5568'
                }}>
                  üåü –ú–µ—á—Ç–∞:
                </label>
                <div style={{
                  background: 'white',
                  borderRadius: '10px',
                  padding: '15px',
                  border: '2px solid #e2e8f0',
                  cursor: 'pointer',
                  textAlign: 'center',
                  fontWeight: 'bold',
                  color: selectedDream ? '#2d3748' : '#a0aec0'
                }}
                onClick={() => setShowDreamModal(true)}
                >
                  {selectedDream || '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—á—Ç—É...'}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Actions */}
        <div style={{ textAlign: 'center' }}>
          <button
            onClick={handleLeaveRoom}
            style={{
              background: 'linear-gradient(135deg, #f56565 0%, #e53e3e 100%)',
              color: 'white',
              border: 'none',
              padding: '15px 30px',
              borderRadius: '25px',
              fontSize: '1.1rem',
              fontWeight: 'bold',
              cursor: 'pointer',
              marginRight: '20px',
              boxShadow: '0 4px 15px rgba(245, 101, 101, 0.4)'
            }}
          >
            üö™ –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
          </button>
          
          <button
            onClick={() => router.push('/advanced-rooms')}
            style={{
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              color: 'white',
              border: 'none',
              padding: '15px 30px',
              borderRadius: '25px',
              fontSize: '1.1rem',
              fontWeight: 'bold',
              cursor: 'pointer',
              boxShadow: '0 4px 15px rgba(102, 126, 234, 0.4)'
            }}
          >
            üè† –ö —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç
          </button>
        </div>

        {/* Profession Modal */}
        {showProfessionModal && (
          <div style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            background: 'rgba(0,0,0,0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
          }}>
            <div style={{
              background: 'white',
              borderRadius: '20px',
              padding: '30px',
              maxWidth: '500px',
              width: '90%',
              maxHeight: '80vh',
              overflow: 'auto'
            }}>
              <h3 style={{ 
                color: '#2d3748', 
                marginBottom: '20px', 
                fontSize: '1.5rem',
                textAlign: 'center'
              }}>
                üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
              </h3>
              
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
                gap: '15px',
                marginBottom: '20px'
              }}>
                {PROFESSIONS.map(prof => (
                  <button
                    key={prof}
                    onClick={() => handleProfessionSelect(prof)}
                    style={{
                      background: selectedProfession === prof 
                        ? 'linear-gradient(135deg, #48bb78 0%, #38a169 100%)'
                        : 'white',
                      color: selectedProfession === prof ? 'white' : '#2d3748',
                      border: '2px solid #e2e8f0',
                      padding: '15px',
                      borderRadius: '10px',
                      fontSize: '1rem',
                      fontWeight: 'bold',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease'
                    }}
                  >
                    {prof}
                  </button>
                ))}
              </div>
              
              <div style={{ textAlign: 'center' }}>
                <button
                  onClick={() => setShowProfessionModal(false)}
                  style={{
                    background: '#a0aec0',
                    color: 'white',
                    border: 'none',
                    padding: '10px 20px',
                    borderRadius: '20px',
                    fontSize: '1rem',
                    fontWeight: 'bold',
                    cursor: 'pointer'
                  }}
                >
                  ‚ùå –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Dream Modal */}
        {showDreamModal && (
          <div style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            background: 'rgba(0,0,0,0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
          }}>
            <div style={{
              background: 'white',
              borderRadius: '20px',
              padding: '30px',
              maxWidth: '500px',
              width: '90%',
              maxHeight: '80vh',
              overflow: 'auto'
            }}>
              <h3 style={{ 
                color: '#2d3748', 
                marginBottom: '20px', 
                fontSize: '1.5rem',
                textAlign: 'center'
              }}>
                üåü –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—á—Ç—É
              </h3>
              
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
                gap: '15px',
                marginBottom: '20px'
              }}>
                {DREAMS.map(dream => (
                  <button
                    key={dream}
                    onClick={() => handleDreamSelect(dream)}
                    style={{
                      background: selectedDream === dream 
                        ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
                        : 'white',
                      color: selectedDream === dream ? 'white' : '#2d3748',
                      border: '2px solid #e2e8f0',
                      padding: '15px',
                      borderRadius: '10px',
                      fontSize: '1rem',
                      fontWeight: 'bold',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease'
                    }}
                  >
                    {dream}
                  </button>
                ))}
              </div>
              
              <div style={{ textAlign: 'center' }}>
                <button
                  onClick={() => setShowDreamModal(false)}
                  style={{
                    background: '#a0aec0',
                    color: 'white',
                    border: 'none',
                    padding: '10px 20px',
                    borderRadius: '20px',
                    fontSize: '1rem',
                    fontWeight: 'bold',
                    cursor: 'pointer'
                  }}
                >
                  ‚ùå –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Connection Status */}
        <div style={{
          position: 'fixed',
          top: '20px',
          right: '20px',
          background: socket?.connected ? '#c6f6d5' : '#fed7d7',
          color: socket?.connected ? '#2f855a' : '#c53030',
          padding: '10px 15px',
          borderRadius: '20px',
          fontSize: '0.9rem',
          fontWeight: 'bold',
          boxShadow: '0 4px 15px rgba(0,0,0,0.1)'
        }}>
          {socket?.connected ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ'}
        </div>
      </div>
    </div>
  );
}
