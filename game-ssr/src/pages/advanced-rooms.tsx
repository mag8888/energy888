import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { io, Socket } from 'socket.io-client';

interface Player {
  id: string;
  name: string;
  email: string;
  socketId: string;
  isReady: boolean;
  profession: string;
  dream: string;
  selectedProfession: string;
  professionConfirmed: boolean;
  joinedAt: string;
  money: number;
  position: number;
  cards: any[];
  isActive: boolean;
}

interface Room {
  id: string;
  name: string;
  maxPlayers: number;
  currentPlayers: number;
  started: boolean;
  createdAt: string;
  creator: string;
  players: Player[];
  professionSelectionMode: string;
  availableProfessions: string[];
  timing: number;
}

interface CreateRoomData {
  name: string;
  maxPlayers: number;
  timing: number;
  creatorUsername: string;
  creatorProfession: string;
  creatorDream: string;
  assignProfessionToAll: boolean;
  professionSelectionMode: string;
  password: string;
}

const PROFESSIONS = [
  '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å', '–ò–Ω–≤–µ—Å—Ç–æ—Ä', '–§–∏–Ω–∞–Ω—Å–∏—Å—Ç', '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', 
  '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–ê–Ω–∞–ª–∏—Ç–∏–∫', '–¢—Ä–µ–π–¥–µ—Ä', '–ë–∞–Ω–∫–∏—Ä'
];

const DREAMS = [
  '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å', '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
  '–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥', '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫–∞—Ä—å–µ—Ä–∞', '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä',
  '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ä—Ç–∞–ø'
];

export default function AdvancedRooms() {
  const [socket, setSocket] = useState<Socket | null>(null);
  const [rooms, setRooms] = useState<Room[]>([]);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [createForm, setCreateForm] = useState<CreateRoomData>({
    name: '',
    maxPlayers: 4,
    timing: 120,
    creatorUsername: '',
    creatorProfession: '',
    creatorDream: '',
    assignProfessionToAll: false,
    professionSelectionMode: 'assigned',
    password: ''
  });
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [userData, setUserData] = useState<any>(null);
  const [selectedProfession, setSelectedProfession] = useState('');
  const [selectedDream, setSelectedDream] = useState('');
  const router = useRouter();

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = localStorage.getItem('user');
    if (!user) {
      router.push('/simple-auth');
      return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const userData = JSON.parse(user);
      setUserData(userData);
      setCreateForm(prev => ({
        ...prev,
        creatorUsername: userData.name || '–ò–≥—Ä–æ–∫',
        creatorProfession: userData.profession || '',
        creatorDream: userData.dream || ''
      }));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Socket.IO
    const socketUrl = process.env.NEXT_PUBLIC_SOCKET_URL || 'https://botenergy-7to1-production.up.railway.app';
    console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Advanced Socket.IO:', socketUrl);
    
    const newSocket = io(socketUrl, {
      transports: ['websocket', 'polling']
    });

    newSocket.on('connect', () => {
      console.log('üîå Socket connected:', newSocket.connected);
      setSocket(newSocket);
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
      newSocket.emit('get-rooms');
    });

    newSocket.on('disconnect', () => {
      console.log('üîå Socket disconnected');
      setSocket(null);
    });

    newSocket.on('rooms-list', (roomsList: Room[]) => {
      console.log('üìã –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç:', roomsList);
      setRooms(roomsList);
    });

    newSocket.on('room-created', (room: Room) => {
      console.log('üè† –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', room);
      setRooms(prev => [...prev, room]);
      setMessage('–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      setShowCreateForm(false);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
      console.log('üö™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', room.id);
      newSocket.emit('join-room', {
        roomId: room.id,
        playerName: userData?.name || '–ò–≥—Ä–æ–∫',
        playerEmail: userData?.email || 'player@example.com',
        profession: selectedProfession,
        dream: selectedDream
      });
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–º–Ω–∞—Ç—É
      setTimeout(() => {
        router.push(`/advanced-room/${room.id}`);
      }, 500);
    });

    newSocket.on('join-room-error', (error: any) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
      setMessage(`–û—à–∏–±–∫–∞: ${error.error}`);
    });

    newSocket.on('rooms-updated', () => {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç...');
      newSocket.emit('get-rooms');
    });

    newSocket.on('error', (error: any) => {
      console.error('‚ùå Socket error:', error);
      setMessage(`–û—à–∏–±–∫–∞: ${error.message}`);
    });

    return () => {
      newSocket.close();
    };
  }, [router, userData?.name, userData?.email, selectedProfession, selectedDream]);

  const handleCreateRoom = () => {
    if (!socket) {
      setMessage('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      return;
    }

    if (!createForm.name.trim()) {
      setMessage('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã');
      return;
    }

    setLoading(true);
    setMessage('');

    socket.emit('create-room', createForm);
  };

  const handleJoinRoom = (roomId: string) => {
    if (!socket) {
      setMessage('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      return;
    }

    setLoading(true);
    setMessage('');

    socket.emit('join-room', {
      roomId,
      playerName: userData?.name || '–ò–≥—Ä–æ–∫',
      playerEmail: userData?.email || 'player@example.com',
      profession: selectedProfession,
      dream: selectedDream
    });

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–º–Ω–∞—Ç—É
    setTimeout(() => {
      router.push(`/advanced-room/${roomId}`);
    }, 500);
  };

  const handleProfessionChange = (profession: string) => {
    setSelectedProfession(profession);
  };

  const handleDreamChange = (dream: string) => {
    setSelectedDream(dream);
  };

  return (
    <div style={{ 
      minHeight: '100vh', 
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      padding: '20px',
      fontFamily: 'Arial, sans-serif'
    }}>
      <div style={{
        maxWidth: '1200px',
        margin: '0 auto',
        background: 'rgba(255, 255, 255, 0.95)',
        borderRadius: '20px',
        padding: '30px',
        boxShadow: '0 20px 40px rgba(0,0,0,0.1)'
      }}>
        {/* Header */}
        <div style={{ textAlign: 'center', marginBottom: '30px' }}>
          <h1 style={{ 
            color: '#2d3748', 
            fontSize: '2.5rem', 
            marginBottom: '10px',
            fontWeight: 'bold'
          }}>
            üéÆ Energy of Money - Advanced Rooms
          </h1>
          <p style={{ color: '#718096', fontSize: '1.1rem' }}>
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {userData?.name || '–ò–≥—Ä–æ–∫'}! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏ –º–µ—á—Ç—É –¥–ª—è –∏–≥—Ä—ã.
          </p>
        </div>

        {/* Profession and Dream Selection */}
        <div style={{
          background: '#f7fafc',
          borderRadius: '15px',
          padding: '25px',
          marginBottom: '30px',
          border: '2px solid #e2e8f0'
        }}>
          <h3 style={{ color: '#2d3748', marginBottom: '20px', fontSize: '1.3rem' }}>
            ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
          </h3>
          
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px' }}>
            {/* Profession Selection */}
            <div>
              <label style={{ 
                display: 'block', 
                marginBottom: '10px', 
                fontWeight: 'bold',
                color: '#4a5568'
              }}>
                üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:
              </label>
              <select
                value={selectedProfession}
                onChange={(e) => handleProfessionChange(e.target.value)}
                style={{
                  width: '100%',
                  padding: '12px',
                  borderRadius: '8px',
                  border: '2px solid #e2e8f0',
                  fontSize: '16px',
                  background: 'white'
                }}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é...</option>
                {PROFESSIONS.map(prof => (
                  <option key={prof} value={prof}>{prof}</option>
                ))}
              </select>
            </div>

            {/* Dream Selection */}
            <div>
              <label style={{ 
                display: 'block', 
                marginBottom: '10px', 
                fontWeight: 'bold',
                color: '#4a5568'
              }}>
                üåü –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—á—Ç—É:
              </label>
              <select
                value={selectedDream}
                onChange={(e) => handleDreamChange(e.target.value)}
                style={{
                  width: '100%',
                  padding: '12px',
                  borderRadius: '8px',
                  border: '2px solid #e2e8f0',
                  fontSize: '16px',
                  background: 'white'
                }}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—á—Ç—É...</option>
                {DREAMS.map(dream => (
                  <option key={dream} value={dream}>{dream}</option>
                ))}
              </select>
            </div>
          </div>
        </div>

        {/* Message */}
        {message && (
          <div style={{
            background: message.includes('–û—à–∏–±–∫–∞') ? '#fed7d7' : '#c6f6d5',
            color: message.includes('–û—à–∏–±–∫–∞') ? '#c53030' : '#2f855a',
            padding: '15px',
            borderRadius: '10px',
            marginBottom: '20px',
            textAlign: 'center',
            fontWeight: 'bold'
          }}>
            {message}
          </div>
        )}

        {/* Create Room Button */}
        <div style={{ textAlign: 'center', marginBottom: '30px' }}>
          <button
            onClick={() => setShowCreateForm(!showCreateForm)}
            style={{
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              color: 'white',
              border: 'none',
              padding: '15px 30px',
              borderRadius: '25px',
              fontSize: '1.1rem',
              fontWeight: 'bold',
              cursor: 'pointer',
              boxShadow: '0 4px 15px rgba(102, 126, 234, 0.4)',
              transition: 'all 0.3s ease'
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.transform = 'translateY(-2px)';
              e.currentTarget.style.boxShadow = '0 6px 20px rgba(102, 126, 234, 0.6)';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.transform = 'translateY(0)';
              e.currentTarget.style.boxShadow = '0 4px 15px rgba(102, 126, 234, 0.4)';
            }}
          >
            {showCreateForm ? '‚ùå –û—Ç–º–µ–Ω–∞' : '‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É'}
          </button>
        </div>

        {/* Create Room Form */}
        {showCreateForm && (
          <div style={{
            background: '#f7fafc',
            borderRadius: '15px',
            padding: '25px',
            marginBottom: '30px',
            border: '2px solid #e2e8f0'
          }}>
            <h3 style={{ color: '#2d3748', marginBottom: '20px', fontSize: '1.3rem' }}>
              üè† –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
            </h3>
            
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px', marginBottom: '20px' }}>
              <div>
                <label style={{ 
                  display: 'block', 
                  marginBottom: '8px', 
                  fontWeight: 'bold',
                  color: '#4a5568'
                }}>
                  –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:
                </label>
                <input
                  type="text"
                  value={createForm.name}
                  onChange={(e) => setCreateForm(prev => ({ ...prev, name: e.target.value }))}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã"
                  style={{
                    width: '100%',
                    padding: '12px',
                    borderRadius: '8px',
                    border: '2px solid #e2e8f0',
                    fontSize: '16px'
                  }}
                />
              </div>
              
              <div>
                <label style={{ 
                  display: 'block', 
                  marginBottom: '8px', 
                  fontWeight: 'bold',
                  color: '#4a5568'
                }}>
                  –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤:
                </label>
                <select
                  value={createForm.maxPlayers}
                  onChange={(e) => setCreateForm(prev => ({ ...prev, maxPlayers: parseInt(e.target.value) }))}
                  style={{
                    width: '100%',
                    padding: '12px',
                    borderRadius: '8px',
                    border: '2px solid #e2e8f0',
                    fontSize: '16px'
                  }}
                >
                  {[2, 3, 4, 5, 6, 7, 8, 9, 10].map(num => (
                    <option key={num} value={num}>{num} –∏–≥—Ä–æ–∫–æ–≤</option>
                  ))}
                </select>
              </div>
            </div>

            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px', marginBottom: '20px' }}>
              <div>
                <label style={{ 
                  display: 'block', 
                  marginBottom: '8px', 
                  fontWeight: 'bold',
                  color: '#4a5568'
                }}>
                  –í—Ä–µ–º—è —Ö–æ–¥–∞ (—Å–µ–∫—É–Ω–¥—ã):
                </label>
                <select
                  value={createForm.timing}
                  onChange={(e) => setCreateForm(prev => ({ ...prev, timing: parseInt(e.target.value) }))}
                  style={{
                    width: '100%',
                    padding: '12px',
                    borderRadius: '8px',
                    border: '2px solid #e2e8f0',
                    fontSize: '16px'
                  }}
                >
                  <option value={60}>60 —Å–µ–∫—É–Ω–¥</option>
                  <option value={90}>90 —Å–µ–∫—É–Ω–¥</option>
                  <option value={120}>120 —Å–µ–∫—É–Ω–¥</option>
                  <option value={180}>180 —Å–µ–∫—É–Ω–¥</option>
                  <option value={300}>300 —Å–µ–∫—É–Ω–¥</option>
                </select>
              </div>
              
              <div>
                <label style={{ 
                  display: 'block', 
                  marginBottom: '8px', 
                  fontWeight: 'bold',
                  color: '#4a5568'
                }}>
                  –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π:
                </label>
                <select
                  value={createForm.professionSelectionMode}
                  onChange={(e) => setCreateForm(prev => ({ ...prev, professionSelectionMode: e.target.value }))}
                  style={{
                    width: '100%',
                    padding: '12px',
                    borderRadius: '8px',
                    border: '2px solid #e2e8f0',
                    fontSize: '16px'
                  }}
                >
                  <option value="choice">–í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞–º–∏</option>
                  <option value="random">–°–ª—É—á–∞–π–Ω—ã–π</option>
                  <option value="assigned">–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ</option>
                </select>
              </div>
            </div>

            <div style={{ textAlign: 'center' }}>
              <button
                onClick={handleCreateRoom}
                disabled={loading}
                style={{
                  background: loading ? '#a0aec0' : 'linear-gradient(135deg, #48bb78 0%, #38a169 100%)',
                  color: 'white',
                  border: 'none',
                  padding: '15px 30px',
                  borderRadius: '25px',
                  fontSize: '1.1rem',
                  fontWeight: 'bold',
                  cursor: loading ? 'not-allowed' : 'pointer',
                  boxShadow: '0 4px 15px rgba(72, 187, 120, 0.4)',
                  transition: 'all 0.3s ease'
                }}
              >
                {loading ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...' : 'üöÄ –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É'}
              </button>
            </div>
          </div>
        )}

        {/* Rooms List */}
        <div>
          <h2 style={{ 
            color: '#2d3748', 
            marginBottom: '20px', 
            fontSize: '1.8rem',
            textAlign: 'center'
          }}>
            üè† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã ({rooms.length})
          </h2>
          
          {rooms.length === 0 ? (
            <div style={{
              textAlign: 'center',
              padding: '40px',
              color: '#718096',
              fontSize: '1.1rem'
            }}>
              –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é!
            </div>
          ) : (
            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fill, minmax(350px, 1fr))',
              gap: '20px'
            }}>
              {rooms.map(room => (
                <div
                  key={room.id}
                  style={{
                    background: 'white',
                    borderRadius: '15px',
                    padding: '20px',
                    border: '2px solid #e2e8f0',
                    boxShadow: '0 4px 15px rgba(0,0,0,0.1)',
                    transition: 'all 0.3s ease'
                  }}
                  onMouseOver={(e) => {
                    e.currentTarget.style.transform = 'translateY(-5px)';
                    e.currentTarget.style.boxShadow = '0 8px 25px rgba(0,0,0,0.15)';
                  }}
                  onMouseOut={(e) => {
                    e.currentTarget.style.transform = 'translateY(0)';
                    e.currentTarget.style.boxShadow = '0 4px 15px rgba(0,0,0,0.1)';
                  }}
                >
                  <h3 style={{ 
                    color: '#2d3748', 
                    marginBottom: '15px',
                    fontSize: '1.3rem',
                    fontWeight: 'bold'
                  }}>
                    {room.name}
                  </h3>
                  
                  <div style={{ marginBottom: '15px' }}>
                    <p style={{ color: '#4a5568', margin: '5px 0' }}>
                      üë• –ò–≥—Ä–æ–∫–∏: {room.currentPlayers}/{room.maxPlayers}
                    </p>
                    <p style={{ color: '#4a5568', margin: '5px 0' }}>
                      ‚è±Ô∏è –í—Ä–µ–º—è —Ö–æ–¥–∞: {room.timing} —Å–µ–∫
                    </p>
                    <p style={{ color: '#4a5568', margin: '5px 0' }}>
                      üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {room.creator}
                    </p>
                    <p style={{ color: '#4a5568', margin: '5px 0' }}>
                      üé≠ –†–µ–∂–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–π: {room.professionSelectionMode}
                    </p>
                    <p style={{ color: '#4a5568', margin: '5px 0' }}>
                      üìÖ –°–æ–∑–¥–∞–Ω–∞: {new Date(room.createdAt).toLocaleString()}
                    </p>
                  </div>
                  
                  <button
                    onClick={() => handleJoinRoom(room.id)}
                    disabled={loading || room.started || room.currentPlayers >= room.maxPlayers}
                    style={{
                      width: '100%',
                      background: room.started || room.currentPlayers >= room.maxPlayers 
                        ? '#a0aec0' 
                        : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                      color: 'white',
                      border: 'none',
                      padding: '12px',
                      borderRadius: '10px',
                      fontSize: '1rem',
                      fontWeight: 'bold',
                      cursor: room.started || room.currentPlayers >= room.maxPlayers 
                        ? 'not-allowed' 
                        : 'pointer',
                      transition: 'all 0.3s ease'
                    }}
                  >
                    {room.started 
                      ? 'üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å' 
                      : room.currentPlayers >= room.maxPlayers 
                        ? '‚ùå –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞'
                        : loading 
                          ? '‚è≥ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...'
                          : 'üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'
                    }
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Connection Status */}
        <div style={{
          position: 'fixed',
          top: '20px',
          right: '20px',
          background: socket?.connected ? '#c6f6d5' : '#fed7d7',
          color: socket?.connected ? '#2f855a' : '#c53030',
          padding: '10px 15px',
          borderRadius: '20px',
          fontSize: '0.9rem',
          fontWeight: 'bold',
          boxShadow: '0 4px 15px rgba(0,0,0,0.1)'
        }}>
          {socket?.connected ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ'}
        </div>
      </div>
    </div>
  );
}
